// Code generated by ent, DO NOT EDIT.

package request

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the request type in the database.
	Label = "request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRequestURL holds the string denoting the request_url field in the database.
	FieldRequestURL = "request_url"
	// FieldRequestMethod holds the string denoting the request_method field in the database.
	FieldRequestMethod = "request_method"
	// FieldRequestHeaders holds the string denoting the request_headers field in the database.
	FieldRequestHeaders = "request_headers"
	// FieldRequestBody holds the string denoting the request_body field in the database.
	FieldRequestBody = "request_body"
	// FieldResponseStatusCode holds the string denoting the response_status_code field in the database.
	FieldResponseStatusCode = "response_status_code"
	// FieldResponseBody holds the string denoting the response_body field in the database.
	FieldResponseBody = "response_body"
	// FieldRequestTimestamp holds the string denoting the request_timestamp field in the database.
	FieldRequestTimestamp = "request_timestamp"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the request in the database.
	Table = "Requests"
)

// Columns holds all SQL columns for request fields.
var Columns = []string{
	FieldID,
	FieldRequestURL,
	FieldRequestMethod,
	FieldRequestHeaders,
	FieldRequestBody,
	FieldResponseStatusCode,
	FieldResponseBody,
	FieldRequestTimestamp,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Request queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRequestURL orders the results by the request_url field.
func ByRequestURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestURL, opts...).ToFunc()
}

// ByRequestMethod orders the results by the request_method field.
func ByRequestMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestMethod, opts...).ToFunc()
}

// ByResponseStatusCode orders the results by the response_status_code field.
func ByResponseStatusCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseStatusCode, opts...).ToFunc()
}

// ByRequestTimestamp orders the results by the request_timestamp field.
func ByRequestTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestTimestamp, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
