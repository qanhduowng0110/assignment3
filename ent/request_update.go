// Code generated by ent, DO NOT EDIT.

package ent

import (
	"assignment3/ent/predicate"
	"assignment3/ent/request"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RequestUpdate is the builder for updating Request entities.
type RequestUpdate struct {
	config
	hooks    []Hook
	mutation *RequestMutation
}

// Where appends a list predicates to the RequestUpdate builder.
func (ru *RequestUpdate) Where(ps ...predicate.Request) *RequestUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRequestURL sets the "request_url" field.
func (ru *RequestUpdate) SetRequestURL(s string) *RequestUpdate {
	ru.mutation.SetRequestURL(s)
	return ru
}

// SetNillableRequestURL sets the "request_url" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableRequestURL(s *string) *RequestUpdate {
	if s != nil {
		ru.SetRequestURL(*s)
	}
	return ru
}

// ClearRequestURL clears the value of the "request_url" field.
func (ru *RequestUpdate) ClearRequestURL() *RequestUpdate {
	ru.mutation.ClearRequestURL()
	return ru
}

// SetRequestMethod sets the "request_method" field.
func (ru *RequestUpdate) SetRequestMethod(s string) *RequestUpdate {
	ru.mutation.SetRequestMethod(s)
	return ru
}

// SetNillableRequestMethod sets the "request_method" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableRequestMethod(s *string) *RequestUpdate {
	if s != nil {
		ru.SetRequestMethod(*s)
	}
	return ru
}

// ClearRequestMethod clears the value of the "request_method" field.
func (ru *RequestUpdate) ClearRequestMethod() *RequestUpdate {
	ru.mutation.ClearRequestMethod()
	return ru
}

// SetRequestHeaders sets the "request_headers" field.
func (ru *RequestUpdate) SetRequestHeaders(m map[string]interface{}) *RequestUpdate {
	ru.mutation.SetRequestHeaders(m)
	return ru
}

// ClearRequestHeaders clears the value of the "request_headers" field.
func (ru *RequestUpdate) ClearRequestHeaders() *RequestUpdate {
	ru.mutation.ClearRequestHeaders()
	return ru
}

// SetRequestBody sets the "request_body" field.
func (ru *RequestUpdate) SetRequestBody(m map[string]interface{}) *RequestUpdate {
	ru.mutation.SetRequestBody(m)
	return ru
}

// ClearRequestBody clears the value of the "request_body" field.
func (ru *RequestUpdate) ClearRequestBody() *RequestUpdate {
	ru.mutation.ClearRequestBody()
	return ru
}

// SetResponseStatusCode sets the "response_status_code" field.
func (ru *RequestUpdate) SetResponseStatusCode(i int32) *RequestUpdate {
	ru.mutation.ResetResponseStatusCode()
	ru.mutation.SetResponseStatusCode(i)
	return ru
}

// SetNillableResponseStatusCode sets the "response_status_code" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableResponseStatusCode(i *int32) *RequestUpdate {
	if i != nil {
		ru.SetResponseStatusCode(*i)
	}
	return ru
}

// AddResponseStatusCode adds i to the "response_status_code" field.
func (ru *RequestUpdate) AddResponseStatusCode(i int32) *RequestUpdate {
	ru.mutation.AddResponseStatusCode(i)
	return ru
}

// ClearResponseStatusCode clears the value of the "response_status_code" field.
func (ru *RequestUpdate) ClearResponseStatusCode() *RequestUpdate {
	ru.mutation.ClearResponseStatusCode()
	return ru
}

// SetResponseBody sets the "response_body" field.
func (ru *RequestUpdate) SetResponseBody(m map[string]interface{}) *RequestUpdate {
	ru.mutation.SetResponseBody(m)
	return ru
}

// ClearResponseBody clears the value of the "response_body" field.
func (ru *RequestUpdate) ClearResponseBody() *RequestUpdate {
	ru.mutation.ClearResponseBody()
	return ru
}

// SetRequestTimestamp sets the "request_timestamp" field.
func (ru *RequestUpdate) SetRequestTimestamp(t time.Time) *RequestUpdate {
	ru.mutation.SetRequestTimestamp(t)
	return ru
}

// SetNillableRequestTimestamp sets the "request_timestamp" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableRequestTimestamp(t *time.Time) *RequestUpdate {
	if t != nil {
		ru.SetRequestTimestamp(*t)
	}
	return ru
}

// ClearRequestTimestamp clears the value of the "request_timestamp" field.
func (ru *RequestUpdate) ClearRequestTimestamp() *RequestUpdate {
	ru.mutation.ClearRequestTimestamp()
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RequestUpdate) SetCreatedAt(t time.Time) *RequestUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableCreatedAt(t *time.Time) *RequestUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// ClearCreatedAt clears the value of the "created_at" field.
func (ru *RequestUpdate) ClearCreatedAt() *RequestUpdate {
	ru.mutation.ClearCreatedAt()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RequestUpdate) SetUpdatedAt(t time.Time) *RequestUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableUpdatedAt(t *time.Time) *RequestUpdate {
	if t != nil {
		ru.SetUpdatedAt(*t)
	}
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *RequestUpdate) ClearUpdatedAt() *RequestUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// Mutation returns the RequestMutation object of the builder.
func (ru *RequestUpdate) Mutation() *RequestMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RequestUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RequestUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RequestUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.RequestURL(); ok {
		_spec.SetField(request.FieldRequestURL, field.TypeString, value)
	}
	if ru.mutation.RequestURLCleared() {
		_spec.ClearField(request.FieldRequestURL, field.TypeString)
	}
	if value, ok := ru.mutation.RequestMethod(); ok {
		_spec.SetField(request.FieldRequestMethod, field.TypeString, value)
	}
	if ru.mutation.RequestMethodCleared() {
		_spec.ClearField(request.FieldRequestMethod, field.TypeString)
	}
	if value, ok := ru.mutation.RequestHeaders(); ok {
		_spec.SetField(request.FieldRequestHeaders, field.TypeJSON, value)
	}
	if ru.mutation.RequestHeadersCleared() {
		_spec.ClearField(request.FieldRequestHeaders, field.TypeJSON)
	}
	if value, ok := ru.mutation.RequestBody(); ok {
		_spec.SetField(request.FieldRequestBody, field.TypeJSON, value)
	}
	if ru.mutation.RequestBodyCleared() {
		_spec.ClearField(request.FieldRequestBody, field.TypeJSON)
	}
	if value, ok := ru.mutation.ResponseStatusCode(); ok {
		_spec.SetField(request.FieldResponseStatusCode, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.AddedResponseStatusCode(); ok {
		_spec.AddField(request.FieldResponseStatusCode, field.TypeInt32, value)
	}
	if ru.mutation.ResponseStatusCodeCleared() {
		_spec.ClearField(request.FieldResponseStatusCode, field.TypeInt32)
	}
	if value, ok := ru.mutation.ResponseBody(); ok {
		_spec.SetField(request.FieldResponseBody, field.TypeJSON, value)
	}
	if ru.mutation.ResponseBodyCleared() {
		_spec.ClearField(request.FieldResponseBody, field.TypeJSON)
	}
	if value, ok := ru.mutation.RequestTimestamp(); ok {
		_spec.SetField(request.FieldRequestTimestamp, field.TypeTime, value)
	}
	if ru.mutation.RequestTimestampCleared() {
		_spec.ClearField(request.FieldRequestTimestamp, field.TypeTime)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(request.FieldCreatedAt, field.TypeTime, value)
	}
	if ru.mutation.CreatedAtCleared() {
		_spec.ClearField(request.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(request.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(request.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RequestUpdateOne is the builder for updating a single Request entity.
type RequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestMutation
}

// SetRequestURL sets the "request_url" field.
func (ruo *RequestUpdateOne) SetRequestURL(s string) *RequestUpdateOne {
	ruo.mutation.SetRequestURL(s)
	return ruo
}

// SetNillableRequestURL sets the "request_url" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableRequestURL(s *string) *RequestUpdateOne {
	if s != nil {
		ruo.SetRequestURL(*s)
	}
	return ruo
}

// ClearRequestURL clears the value of the "request_url" field.
func (ruo *RequestUpdateOne) ClearRequestURL() *RequestUpdateOne {
	ruo.mutation.ClearRequestURL()
	return ruo
}

// SetRequestMethod sets the "request_method" field.
func (ruo *RequestUpdateOne) SetRequestMethod(s string) *RequestUpdateOne {
	ruo.mutation.SetRequestMethod(s)
	return ruo
}

// SetNillableRequestMethod sets the "request_method" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableRequestMethod(s *string) *RequestUpdateOne {
	if s != nil {
		ruo.SetRequestMethod(*s)
	}
	return ruo
}

// ClearRequestMethod clears the value of the "request_method" field.
func (ruo *RequestUpdateOne) ClearRequestMethod() *RequestUpdateOne {
	ruo.mutation.ClearRequestMethod()
	return ruo
}

// SetRequestHeaders sets the "request_headers" field.
func (ruo *RequestUpdateOne) SetRequestHeaders(m map[string]interface{}) *RequestUpdateOne {
	ruo.mutation.SetRequestHeaders(m)
	return ruo
}

// ClearRequestHeaders clears the value of the "request_headers" field.
func (ruo *RequestUpdateOne) ClearRequestHeaders() *RequestUpdateOne {
	ruo.mutation.ClearRequestHeaders()
	return ruo
}

// SetRequestBody sets the "request_body" field.
func (ruo *RequestUpdateOne) SetRequestBody(m map[string]interface{}) *RequestUpdateOne {
	ruo.mutation.SetRequestBody(m)
	return ruo
}

// ClearRequestBody clears the value of the "request_body" field.
func (ruo *RequestUpdateOne) ClearRequestBody() *RequestUpdateOne {
	ruo.mutation.ClearRequestBody()
	return ruo
}

// SetResponseStatusCode sets the "response_status_code" field.
func (ruo *RequestUpdateOne) SetResponseStatusCode(i int32) *RequestUpdateOne {
	ruo.mutation.ResetResponseStatusCode()
	ruo.mutation.SetResponseStatusCode(i)
	return ruo
}

// SetNillableResponseStatusCode sets the "response_status_code" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableResponseStatusCode(i *int32) *RequestUpdateOne {
	if i != nil {
		ruo.SetResponseStatusCode(*i)
	}
	return ruo
}

// AddResponseStatusCode adds i to the "response_status_code" field.
func (ruo *RequestUpdateOne) AddResponseStatusCode(i int32) *RequestUpdateOne {
	ruo.mutation.AddResponseStatusCode(i)
	return ruo
}

// ClearResponseStatusCode clears the value of the "response_status_code" field.
func (ruo *RequestUpdateOne) ClearResponseStatusCode() *RequestUpdateOne {
	ruo.mutation.ClearResponseStatusCode()
	return ruo
}

// SetResponseBody sets the "response_body" field.
func (ruo *RequestUpdateOne) SetResponseBody(m map[string]interface{}) *RequestUpdateOne {
	ruo.mutation.SetResponseBody(m)
	return ruo
}

// ClearResponseBody clears the value of the "response_body" field.
func (ruo *RequestUpdateOne) ClearResponseBody() *RequestUpdateOne {
	ruo.mutation.ClearResponseBody()
	return ruo
}

// SetRequestTimestamp sets the "request_timestamp" field.
func (ruo *RequestUpdateOne) SetRequestTimestamp(t time.Time) *RequestUpdateOne {
	ruo.mutation.SetRequestTimestamp(t)
	return ruo
}

// SetNillableRequestTimestamp sets the "request_timestamp" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableRequestTimestamp(t *time.Time) *RequestUpdateOne {
	if t != nil {
		ruo.SetRequestTimestamp(*t)
	}
	return ruo
}

// ClearRequestTimestamp clears the value of the "request_timestamp" field.
func (ruo *RequestUpdateOne) ClearRequestTimestamp() *RequestUpdateOne {
	ruo.mutation.ClearRequestTimestamp()
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RequestUpdateOne) SetCreatedAt(t time.Time) *RequestUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableCreatedAt(t *time.Time) *RequestUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (ruo *RequestUpdateOne) ClearCreatedAt() *RequestUpdateOne {
	ruo.mutation.ClearCreatedAt()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RequestUpdateOne) SetUpdatedAt(t time.Time) *RequestUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableUpdatedAt(t *time.Time) *RequestUpdateOne {
	if t != nil {
		ruo.SetUpdatedAt(*t)
	}
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *RequestUpdateOne) ClearUpdatedAt() *RequestUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// Mutation returns the RequestMutation object of the builder.
func (ruo *RequestUpdateOne) Mutation() *RequestMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RequestUpdate builder.
func (ruo *RequestUpdateOne) Where(ps ...predicate.Request) *RequestUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RequestUpdateOne) Select(field string, fields ...string) *RequestUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Request entity.
func (ruo *RequestUpdateOne) Save(ctx context.Context) (*Request, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RequestUpdateOne) SaveX(ctx context.Context) *Request {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RequestUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RequestUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RequestUpdateOne) sqlSave(ctx context.Context) (_node *Request, err error) {
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Request.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, request.FieldID)
		for _, f := range fields {
			if !request.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != request.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.RequestURL(); ok {
		_spec.SetField(request.FieldRequestURL, field.TypeString, value)
	}
	if ruo.mutation.RequestURLCleared() {
		_spec.ClearField(request.FieldRequestURL, field.TypeString)
	}
	if value, ok := ruo.mutation.RequestMethod(); ok {
		_spec.SetField(request.FieldRequestMethod, field.TypeString, value)
	}
	if ruo.mutation.RequestMethodCleared() {
		_spec.ClearField(request.FieldRequestMethod, field.TypeString)
	}
	if value, ok := ruo.mutation.RequestHeaders(); ok {
		_spec.SetField(request.FieldRequestHeaders, field.TypeJSON, value)
	}
	if ruo.mutation.RequestHeadersCleared() {
		_spec.ClearField(request.FieldRequestHeaders, field.TypeJSON)
	}
	if value, ok := ruo.mutation.RequestBody(); ok {
		_spec.SetField(request.FieldRequestBody, field.TypeJSON, value)
	}
	if ruo.mutation.RequestBodyCleared() {
		_spec.ClearField(request.FieldRequestBody, field.TypeJSON)
	}
	if value, ok := ruo.mutation.ResponseStatusCode(); ok {
		_spec.SetField(request.FieldResponseStatusCode, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.AddedResponseStatusCode(); ok {
		_spec.AddField(request.FieldResponseStatusCode, field.TypeInt32, value)
	}
	if ruo.mutation.ResponseStatusCodeCleared() {
		_spec.ClearField(request.FieldResponseStatusCode, field.TypeInt32)
	}
	if value, ok := ruo.mutation.ResponseBody(); ok {
		_spec.SetField(request.FieldResponseBody, field.TypeJSON, value)
	}
	if ruo.mutation.ResponseBodyCleared() {
		_spec.ClearField(request.FieldResponseBody, field.TypeJSON)
	}
	if value, ok := ruo.mutation.RequestTimestamp(); ok {
		_spec.SetField(request.FieldRequestTimestamp, field.TypeTime, value)
	}
	if ruo.mutation.RequestTimestampCleared() {
		_spec.ClearField(request.FieldRequestTimestamp, field.TypeTime)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(request.FieldCreatedAt, field.TypeTime, value)
	}
	if ruo.mutation.CreatedAtCleared() {
		_spec.ClearField(request.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(request.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(request.FieldUpdatedAt, field.TypeTime)
	}
	_node = &Request{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
