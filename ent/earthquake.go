// Code generated by ent, DO NOT EDIT.

package ent

import (
	"assignment3/ent/earthquake"
	"assignment3/ent/location"
	"assignment3/ent/magnitude"
	enttime "assignment3/ent/time"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Earthquake is the model entity for the Earthquake schema.
type Earthquake struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// LocationID holds the value of the "location_id" field.
	LocationID int `json:"location_id,omitempty"`
	// TimeID holds the value of the "time_id" field.
	TimeID int `json:"time_id,omitempty"`
	// MagitudeID holds the value of the "magitude_id" field.
	MagitudeID int `json:"magitude_id,omitempty"`
	// Dept holds the value of the "dept" field.
	Dept float64 `json:"dept,omitempty"`
	// Significance holds the value of the "significance" field.
	Significance string `json:"significance,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Tsunami holds the value of the "tsunami" field.
	Tsunami int32 `json:"tsunami,omitempty"`
	// Net holds the value of the "net" field.
	Net string `json:"net,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Sources holds the value of the "sources" field.
	Sources string `json:"sources,omitempty"`
	// Nst holds the value of the "nst" field.
	Nst int `json:"nst,omitempty"`
	// Dmin holds the value of the "dmin" field.
	Dmin float64 `json:"dmin,omitempty"`
	// Rms holds the value of the "rms" field.
	Rms float64 `json:"rms,omitempty"`
	// Gap holds the value of the "gap" field.
	Gap float64 `json:"gap,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EarthquakeQuery when eager-loading is set.
	Edges        EarthquakeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EarthquakeEdges holds the relations/edges for other nodes in the graph.
type EarthquakeEdges struct {
	// AssociatedEvents holds the value of the associated_events edge.
	AssociatedEvents []*AssociatedEvent `json:"associated_events,omitempty"`
	// Location holds the value of the location edge.
	Location *Location `json:"location,omitempty"`
	// Magnitude holds the value of the magnitude edge.
	Magnitude *Magnitude `json:"magnitude,omitempty"`
	// Time holds the value of the time edge.
	Time *Time `json:"time,omitempty"`
	// Types holds the value of the types edge.
	Types []*Type_eathquake `json:"types,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// AssociatedEventsOrErr returns the AssociatedEvents value or an error if the edge
// was not loaded in eager-loading.
func (e EarthquakeEdges) AssociatedEventsOrErr() ([]*AssociatedEvent, error) {
	if e.loadedTypes[0] {
		return e.AssociatedEvents, nil
	}
	return nil, &NotLoadedError{edge: "associated_events"}
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EarthquakeEdges) LocationOrErr() (*Location, error) {
	if e.Location != nil {
		return e.Location, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: location.Label}
	}
	return nil, &NotLoadedError{edge: "location"}
}

// MagnitudeOrErr returns the Magnitude value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EarthquakeEdges) MagnitudeOrErr() (*Magnitude, error) {
	if e.Magnitude != nil {
		return e.Magnitude, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: magnitude.Label}
	}
	return nil, &NotLoadedError{edge: "magnitude"}
}

// TimeOrErr returns the Time value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EarthquakeEdges) TimeOrErr() (*Time, error) {
	if e.Time != nil {
		return e.Time, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: enttime.Label}
	}
	return nil, &NotLoadedError{edge: "time"}
}

// TypesOrErr returns the Types value or an error if the edge
// was not loaded in eager-loading.
func (e EarthquakeEdges) TypesOrErr() ([]*Type_eathquake, error) {
	if e.loadedTypes[4] {
		return e.Types, nil
	}
	return nil, &NotLoadedError{edge: "types"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Earthquake) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case earthquake.FieldDept, earthquake.FieldDmin, earthquake.FieldRms, earthquake.FieldGap:
			values[i] = new(sql.NullFloat64)
		case earthquake.FieldID, earthquake.FieldLocationID, earthquake.FieldTimeID, earthquake.FieldMagitudeID, earthquake.FieldTsunami, earthquake.FieldNst:
			values[i] = new(sql.NullInt64)
		case earthquake.FieldSignificance, earthquake.FieldURL, earthquake.FieldStatus, earthquake.FieldNet, earthquake.FieldCode, earthquake.FieldSources:
			values[i] = new(sql.NullString)
		case earthquake.FieldCreatedAt, earthquake.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Earthquake fields.
func (e *Earthquake) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case earthquake.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case earthquake.FieldLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field location_id", values[i])
			} else if value.Valid {
				e.LocationID = int(value.Int64)
			}
		case earthquake.FieldTimeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_id", values[i])
			} else if value.Valid {
				e.TimeID = int(value.Int64)
			}
		case earthquake.FieldMagitudeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field magitude_id", values[i])
			} else if value.Valid {
				e.MagitudeID = int(value.Int64)
			}
		case earthquake.FieldDept:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field dept", values[i])
			} else if value.Valid {
				e.Dept = value.Float64
			}
		case earthquake.FieldSignificance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field significance", values[i])
			} else if value.Valid {
				e.Significance = value.String
			}
		case earthquake.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				e.URL = value.String
			}
		case earthquake.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = value.String
			}
		case earthquake.FieldTsunami:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tsunami", values[i])
			} else if value.Valid {
				e.Tsunami = int32(value.Int64)
			}
		case earthquake.FieldNet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field net", values[i])
			} else if value.Valid {
				e.Net = value.String
			}
		case earthquake.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				e.Code = value.String
			}
		case earthquake.FieldSources:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sources", values[i])
			} else if value.Valid {
				e.Sources = value.String
			}
		case earthquake.FieldNst:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nst", values[i])
			} else if value.Valid {
				e.Nst = int(value.Int64)
			}
		case earthquake.FieldDmin:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field dmin", values[i])
			} else if value.Valid {
				e.Dmin = value.Float64
			}
		case earthquake.FieldRms:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rms", values[i])
			} else if value.Valid {
				e.Rms = value.Float64
			}
		case earthquake.FieldGap:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field gap", values[i])
			} else if value.Valid {
				e.Gap = value.Float64
			}
		case earthquake.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case earthquake.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Earthquake.
// This includes values selected through modifiers, order, etc.
func (e *Earthquake) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryAssociatedEvents queries the "associated_events" edge of the Earthquake entity.
func (e *Earthquake) QueryAssociatedEvents() *AssociatedEventQuery {
	return NewEarthquakeClient(e.config).QueryAssociatedEvents(e)
}

// QueryLocation queries the "location" edge of the Earthquake entity.
func (e *Earthquake) QueryLocation() *LocationQuery {
	return NewEarthquakeClient(e.config).QueryLocation(e)
}

// QueryMagnitude queries the "magnitude" edge of the Earthquake entity.
func (e *Earthquake) QueryMagnitude() *MagnitudeQuery {
	return NewEarthquakeClient(e.config).QueryMagnitude(e)
}

// QueryTime queries the "time" edge of the Earthquake entity.
func (e *Earthquake) QueryTime() *TimeQuery {
	return NewEarthquakeClient(e.config).QueryTime(e)
}

// QueryTypes queries the "types" edge of the Earthquake entity.
func (e *Earthquake) QueryTypes() *TypeEathquakeQuery {
	return NewEarthquakeClient(e.config).QueryTypes(e)
}

// Update returns a builder for updating this Earthquake.
// Note that you need to call Earthquake.Unwrap() before calling this method if this Earthquake
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Earthquake) Update() *EarthquakeUpdateOne {
	return NewEarthquakeClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Earthquake entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Earthquake) Unwrap() *Earthquake {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Earthquake is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Earthquake) String() string {
	var builder strings.Builder
	builder.WriteString("Earthquake(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("location_id=")
	builder.WriteString(fmt.Sprintf("%v", e.LocationID))
	builder.WriteString(", ")
	builder.WriteString("time_id=")
	builder.WriteString(fmt.Sprintf("%v", e.TimeID))
	builder.WriteString(", ")
	builder.WriteString("magitude_id=")
	builder.WriteString(fmt.Sprintf("%v", e.MagitudeID))
	builder.WriteString(", ")
	builder.WriteString("dept=")
	builder.WriteString(fmt.Sprintf("%v", e.Dept))
	builder.WriteString(", ")
	builder.WriteString("significance=")
	builder.WriteString(e.Significance)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(e.URL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(e.Status)
	builder.WriteString(", ")
	builder.WriteString("tsunami=")
	builder.WriteString(fmt.Sprintf("%v", e.Tsunami))
	builder.WriteString(", ")
	builder.WriteString("net=")
	builder.WriteString(e.Net)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(e.Code)
	builder.WriteString(", ")
	builder.WriteString("sources=")
	builder.WriteString(e.Sources)
	builder.WriteString(", ")
	builder.WriteString("nst=")
	builder.WriteString(fmt.Sprintf("%v", e.Nst))
	builder.WriteString(", ")
	builder.WriteString("dmin=")
	builder.WriteString(fmt.Sprintf("%v", e.Dmin))
	builder.WriteString(", ")
	builder.WriteString("rms=")
	builder.WriteString(fmt.Sprintf("%v", e.Rms))
	builder.WriteString(", ")
	builder.WriteString("gap=")
	builder.WriteString(fmt.Sprintf("%v", e.Gap))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Earthquakes is a parsable slice of Earthquake.
type Earthquakes []*Earthquake
