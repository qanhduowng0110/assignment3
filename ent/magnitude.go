// Code generated by ent, DO NOT EDIT.

package ent

import (
	"assignment3/ent/magnitude"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Magnitude is the model entity for the Magnitude schema.
type Magnitude struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MagnitudeValue holds the value of the "magnitude_value" field.
	MagnitudeValue float64 `json:"magnitude_value,omitempty"`
	// MagnitudeType holds the value of the "magnitude_type" field.
	MagnitudeType string `json:"magnitude_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MagnitudeQuery when eager-loading is set.
	Edges        MagnitudeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MagnitudeEdges holds the relations/edges for other nodes in the graph.
type MagnitudeEdges struct {
	// Earthquakes holds the value of the earthquakes edge.
	Earthquakes []*Earthquake `json:"earthquakes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EarthquakesOrErr returns the Earthquakes value or an error if the edge
// was not loaded in eager-loading.
func (e MagnitudeEdges) EarthquakesOrErr() ([]*Earthquake, error) {
	if e.loadedTypes[0] {
		return e.Earthquakes, nil
	}
	return nil, &NotLoadedError{edge: "earthquakes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Magnitude) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case magnitude.FieldMagnitudeValue:
			values[i] = new(sql.NullFloat64)
		case magnitude.FieldID:
			values[i] = new(sql.NullInt64)
		case magnitude.FieldMagnitudeType:
			values[i] = new(sql.NullString)
		case magnitude.FieldCreatedAt, magnitude.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Magnitude fields.
func (m *Magnitude) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case magnitude.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case magnitude.FieldMagnitudeValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field magnitude_value", values[i])
			} else if value.Valid {
				m.MagnitudeValue = value.Float64
			}
		case magnitude.FieldMagnitudeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field magnitude_type", values[i])
			} else if value.Valid {
				m.MagnitudeType = value.String
			}
		case magnitude.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case magnitude.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Magnitude.
// This includes values selected through modifiers, order, etc.
func (m *Magnitude) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryEarthquakes queries the "earthquakes" edge of the Magnitude entity.
func (m *Magnitude) QueryEarthquakes() *EarthquakeQuery {
	return NewMagnitudeClient(m.config).QueryEarthquakes(m)
}

// Update returns a builder for updating this Magnitude.
// Note that you need to call Magnitude.Unwrap() before calling this method if this Magnitude
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Magnitude) Update() *MagnitudeUpdateOne {
	return NewMagnitudeClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Magnitude entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Magnitude) Unwrap() *Magnitude {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Magnitude is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Magnitude) String() string {
	var builder strings.Builder
	builder.WriteString("Magnitude(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("magnitude_value=")
	builder.WriteString(fmt.Sprintf("%v", m.MagnitudeValue))
	builder.WriteString(", ")
	builder.WriteString("magnitude_type=")
	builder.WriteString(m.MagnitudeType)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Magnitudes is a parsable slice of Magnitude.
type Magnitudes []*Magnitude
