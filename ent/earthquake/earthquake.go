// Code generated by ent, DO NOT EDIT.

package earthquake

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the earthquake type in the database.
	Label = "earthquake"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLocationID holds the string denoting the location_id field in the database.
	FieldLocationID = "location_id"
	// FieldTimeID holds the string denoting the time_id field in the database.
	FieldTimeID = "time_id"
	// FieldMagitudeID holds the string denoting the magitude_id field in the database.
	FieldMagitudeID = "magitude_id"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTsunami holds the string denoting the tsunami field in the database.
	FieldTsunami = "tsunami"
	// FieldNet holds the string denoting the net field in the database.
	FieldNet = "net"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldSources holds the string denoting the sources field in the database.
	FieldSources = "sources"
	// FieldNst holds the string denoting the nst field in the database.
	FieldNst = "nst"
	// FieldDmin holds the string denoting the dmin field in the database.
	FieldDmin = "dmin"
	// FieldRms holds the string denoting the rms field in the database.
	FieldRms = "rms"
	// FieldGap holds the string denoting the gap field in the database.
	FieldGap = "gap"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAssociatedEvents holds the string denoting the associated_events edge name in mutations.
	EdgeAssociatedEvents = "associated_events"
	// EdgeLocation holds the string denoting the location edge name in mutations.
	EdgeLocation = "location"
	// EdgeMagnitude holds the string denoting the magnitude edge name in mutations.
	EdgeMagnitude = "magnitude"
	// EdgeTime holds the string denoting the time edge name in mutations.
	EdgeTime = "time"
	// EdgeTypes holds the string denoting the types edge name in mutations.
	EdgeTypes = "types"
	// Table holds the table name of the earthquake in the database.
	Table = "Earthquakes"
	// AssociatedEventsTable is the table that holds the associated_events relation/edge.
	AssociatedEventsTable = "AssociatedEvent"
	// AssociatedEventsInverseTable is the table name for the AssociatedEvent entity.
	// It exists in this package in order to avoid circular dependency with the "associatedevent" package.
	AssociatedEventsInverseTable = "AssociatedEvent"
	// AssociatedEventsColumn is the table column denoting the associated_events relation/edge.
	AssociatedEventsColumn = "earthquake_id"
	// LocationTable is the table that holds the location relation/edge.
	LocationTable = "Earthquakes"
	// LocationInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	LocationInverseTable = "Location"
	// LocationColumn is the table column denoting the location relation/edge.
	LocationColumn = "location_id"
	// MagnitudeTable is the table that holds the magnitude relation/edge.
	MagnitudeTable = "Earthquakes"
	// MagnitudeInverseTable is the table name for the Magnitude entity.
	// It exists in this package in order to avoid circular dependency with the "magnitude" package.
	MagnitudeInverseTable = "Magnitudes"
	// MagnitudeColumn is the table column denoting the magnitude relation/edge.
	MagnitudeColumn = "magitude_id"
	// TimeTable is the table that holds the time relation/edge.
	TimeTable = "Earthquakes"
	// TimeInverseTable is the table name for the Time entity.
	// It exists in this package in order to avoid circular dependency with the "enttime" package.
	TimeInverseTable = "Times"
	// TimeColumn is the table column denoting the time relation/edge.
	TimeColumn = "time_id"
	// TypesTable is the table that holds the types relation/edge.
	TypesTable = "Types"
	// TypesInverseTable is the table name for the Type_eathquake entity.
	// It exists in this package in order to avoid circular dependency with the "type_eathquake" package.
	TypesInverseTable = "Types"
	// TypesColumn is the table column denoting the types relation/edge.
	TypesColumn = "earthquake_id"
)

// Columns holds all SQL columns for earthquake fields.
var Columns = []string{
	FieldID,
	FieldLocationID,
	FieldTimeID,
	FieldMagitudeID,
	FieldURL,
	FieldStatus,
	FieldTsunami,
	FieldNet,
	FieldCode,
	FieldSources,
	FieldNst,
	FieldDmin,
	FieldRms,
	FieldGap,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Earthquake queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByLocationID orders the results by the location_id field.
func ByLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocationID, opts...).ToFunc()
}

// ByTimeID orders the results by the time_id field.
func ByTimeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeID, opts...).ToFunc()
}

// ByMagitudeID orders the results by the magitude_id field.
func ByMagitudeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMagitudeID, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTsunami orders the results by the tsunami field.
func ByTsunami(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTsunami, opts...).ToFunc()
}

// ByNet orders the results by the net field.
func ByNet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNet, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// BySources orders the results by the sources field.
func BySources(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSources, opts...).ToFunc()
}

// ByNst orders the results by the nst field.
func ByNst(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNst, opts...).ToFunc()
}

// ByDmin orders the results by the dmin field.
func ByDmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDmin, opts...).ToFunc()
}

// ByRms orders the results by the rms field.
func ByRms(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRms, opts...).ToFunc()
}

// ByGap orders the results by the gap field.
func ByGap(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGap, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAssociatedEventsCount orders the results by associated_events count.
func ByAssociatedEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssociatedEventsStep(), opts...)
	}
}

// ByAssociatedEvents orders the results by associated_events terms.
func ByAssociatedEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssociatedEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLocationField orders the results by location field.
func ByLocationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocationStep(), sql.OrderByField(field, opts...))
	}
}

// ByMagnitudeField orders the results by magnitude field.
func ByMagnitudeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMagnitudeStep(), sql.OrderByField(field, opts...))
	}
}

// ByTimeField orders the results by time field.
func ByTimeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTimeStep(), sql.OrderByField(field, opts...))
	}
}

// ByTypesCount orders the results by types count.
func ByTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTypesStep(), opts...)
	}
}

// ByTypes orders the results by types terms.
func ByTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAssociatedEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssociatedEventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssociatedEventsTable, AssociatedEventsColumn),
	)
}
func newLocationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LocationTable, LocationColumn),
	)
}
func newMagnitudeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MagnitudeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MagnitudeTable, MagnitudeColumn),
	)
}
func newTimeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TimeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TimeTable, TimeColumn),
	)
}
func newTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TypesTable, TypesColumn),
	)
}
