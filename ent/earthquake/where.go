// Code generated by ent, DO NOT EDIT.

package earthquake

import (
	"assignment3/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldID, id))
}

// LocationID applies equality check predicate on the "location_id" field. It's identical to LocationIDEQ.
func LocationID(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldLocationID, v))
}

// TimeID applies equality check predicate on the "time_id" field. It's identical to TimeIDEQ.
func TimeID(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTimeID, v))
}

// MagitudeID applies equality check predicate on the "magitude_id" field. It's identical to MagitudeIDEQ.
func MagitudeID(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldMagitudeID, v))
}

// Dept applies equality check predicate on the "dept" field. It's identical to DeptEQ.
func Dept(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDept, v))
}

// Significance applies equality check predicate on the "significance" field. It's identical to SignificanceEQ.
func Significance(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldSignificance, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldURL, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldStatus, v))
}

// Tsunami applies equality check predicate on the "tsunami" field. It's identical to TsunamiEQ.
func Tsunami(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTsunami, v))
}

// Net applies equality check predicate on the "net" field. It's identical to NetEQ.
func Net(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNet, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldCode, v))
}

// Sources applies equality check predicate on the "sources" field. It's identical to SourcesEQ.
func Sources(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldSources, v))
}

// Nst applies equality check predicate on the "nst" field. It's identical to NstEQ.
func Nst(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNst, v))
}

// Dmin applies equality check predicate on the "dmin" field. It's identical to DminEQ.
func Dmin(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDmin, v))
}

// Rms applies equality check predicate on the "rms" field. It's identical to RmsEQ.
func Rms(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldRms, v))
}

// Gap applies equality check predicate on the "gap" field. It's identical to GapEQ.
func Gap(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldGap, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldUpdatedAt, v))
}

// LocationIDEQ applies the EQ predicate on the "location_id" field.
func LocationIDEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldLocationID, v))
}

// LocationIDNEQ applies the NEQ predicate on the "location_id" field.
func LocationIDNEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldLocationID, v))
}

// LocationIDIn applies the In predicate on the "location_id" field.
func LocationIDIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldLocationID, vs...))
}

// LocationIDNotIn applies the NotIn predicate on the "location_id" field.
func LocationIDNotIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldLocationID, vs...))
}

// LocationIDIsNil applies the IsNil predicate on the "location_id" field.
func LocationIDIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldLocationID))
}

// LocationIDNotNil applies the NotNil predicate on the "location_id" field.
func LocationIDNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldLocationID))
}

// TimeIDEQ applies the EQ predicate on the "time_id" field.
func TimeIDEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTimeID, v))
}

// TimeIDNEQ applies the NEQ predicate on the "time_id" field.
func TimeIDNEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldTimeID, v))
}

// TimeIDIn applies the In predicate on the "time_id" field.
func TimeIDIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldTimeID, vs...))
}

// TimeIDNotIn applies the NotIn predicate on the "time_id" field.
func TimeIDNotIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldTimeID, vs...))
}

// TimeIDIsNil applies the IsNil predicate on the "time_id" field.
func TimeIDIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldTimeID))
}

// TimeIDNotNil applies the NotNil predicate on the "time_id" field.
func TimeIDNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldTimeID))
}

// MagitudeIDEQ applies the EQ predicate on the "magitude_id" field.
func MagitudeIDEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldMagitudeID, v))
}

// MagitudeIDNEQ applies the NEQ predicate on the "magitude_id" field.
func MagitudeIDNEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldMagitudeID, v))
}

// MagitudeIDIn applies the In predicate on the "magitude_id" field.
func MagitudeIDIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldMagitudeID, vs...))
}

// MagitudeIDNotIn applies the NotIn predicate on the "magitude_id" field.
func MagitudeIDNotIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldMagitudeID, vs...))
}

// MagitudeIDIsNil applies the IsNil predicate on the "magitude_id" field.
func MagitudeIDIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldMagitudeID))
}

// MagitudeIDNotNil applies the NotNil predicate on the "magitude_id" field.
func MagitudeIDNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldMagitudeID))
}

// DeptEQ applies the EQ predicate on the "dept" field.
func DeptEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDept, v))
}

// DeptNEQ applies the NEQ predicate on the "dept" field.
func DeptNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldDept, v))
}

// DeptIn applies the In predicate on the "dept" field.
func DeptIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldDept, vs...))
}

// DeptNotIn applies the NotIn predicate on the "dept" field.
func DeptNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldDept, vs...))
}

// DeptGT applies the GT predicate on the "dept" field.
func DeptGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldDept, v))
}

// DeptGTE applies the GTE predicate on the "dept" field.
func DeptGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldDept, v))
}

// DeptLT applies the LT predicate on the "dept" field.
func DeptLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldDept, v))
}

// DeptLTE applies the LTE predicate on the "dept" field.
func DeptLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldDept, v))
}

// DeptIsNil applies the IsNil predicate on the "dept" field.
func DeptIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldDept))
}

// DeptNotNil applies the NotNil predicate on the "dept" field.
func DeptNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldDept))
}

// SignificanceEQ applies the EQ predicate on the "significance" field.
func SignificanceEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldSignificance, v))
}

// SignificanceNEQ applies the NEQ predicate on the "significance" field.
func SignificanceNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldSignificance, v))
}

// SignificanceIn applies the In predicate on the "significance" field.
func SignificanceIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldSignificance, vs...))
}

// SignificanceNotIn applies the NotIn predicate on the "significance" field.
func SignificanceNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldSignificance, vs...))
}

// SignificanceGT applies the GT predicate on the "significance" field.
func SignificanceGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldSignificance, v))
}

// SignificanceGTE applies the GTE predicate on the "significance" field.
func SignificanceGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldSignificance, v))
}

// SignificanceLT applies the LT predicate on the "significance" field.
func SignificanceLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldSignificance, v))
}

// SignificanceLTE applies the LTE predicate on the "significance" field.
func SignificanceLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldSignificance, v))
}

// SignificanceContains applies the Contains predicate on the "significance" field.
func SignificanceContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldSignificance, v))
}

// SignificanceHasPrefix applies the HasPrefix predicate on the "significance" field.
func SignificanceHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldSignificance, v))
}

// SignificanceHasSuffix applies the HasSuffix predicate on the "significance" field.
func SignificanceHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldSignificance, v))
}

// SignificanceIsNil applies the IsNil predicate on the "significance" field.
func SignificanceIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldSignificance))
}

// SignificanceNotNil applies the NotNil predicate on the "significance" field.
func SignificanceNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldSignificance))
}

// SignificanceEqualFold applies the EqualFold predicate on the "significance" field.
func SignificanceEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldSignificance, v))
}

// SignificanceContainsFold applies the ContainsFold predicate on the "significance" field.
func SignificanceContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldSignificance, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldURL, v))
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldURL))
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldURL))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldURL, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldStatus, v))
}

// TsunamiEQ applies the EQ predicate on the "tsunami" field.
func TsunamiEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldTsunami, v))
}

// TsunamiNEQ applies the NEQ predicate on the "tsunami" field.
func TsunamiNEQ(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldTsunami, v))
}

// TsunamiIn applies the In predicate on the "tsunami" field.
func TsunamiIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldTsunami, vs...))
}

// TsunamiNotIn applies the NotIn predicate on the "tsunami" field.
func TsunamiNotIn(vs ...int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldTsunami, vs...))
}

// TsunamiGT applies the GT predicate on the "tsunami" field.
func TsunamiGT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldTsunami, v))
}

// TsunamiGTE applies the GTE predicate on the "tsunami" field.
func TsunamiGTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldTsunami, v))
}

// TsunamiLT applies the LT predicate on the "tsunami" field.
func TsunamiLT(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldTsunami, v))
}

// TsunamiLTE applies the LTE predicate on the "tsunami" field.
func TsunamiLTE(v int32) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldTsunami, v))
}

// TsunamiIsNil applies the IsNil predicate on the "tsunami" field.
func TsunamiIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldTsunami))
}

// TsunamiNotNil applies the NotNil predicate on the "tsunami" field.
func TsunamiNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldTsunami))
}

// NetEQ applies the EQ predicate on the "net" field.
func NetEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNet, v))
}

// NetNEQ applies the NEQ predicate on the "net" field.
func NetNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldNet, v))
}

// NetIn applies the In predicate on the "net" field.
func NetIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldNet, vs...))
}

// NetNotIn applies the NotIn predicate on the "net" field.
func NetNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldNet, vs...))
}

// NetGT applies the GT predicate on the "net" field.
func NetGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldNet, v))
}

// NetGTE applies the GTE predicate on the "net" field.
func NetGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldNet, v))
}

// NetLT applies the LT predicate on the "net" field.
func NetLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldNet, v))
}

// NetLTE applies the LTE predicate on the "net" field.
func NetLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldNet, v))
}

// NetContains applies the Contains predicate on the "net" field.
func NetContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldNet, v))
}

// NetHasPrefix applies the HasPrefix predicate on the "net" field.
func NetHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldNet, v))
}

// NetHasSuffix applies the HasSuffix predicate on the "net" field.
func NetHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldNet, v))
}

// NetIsNil applies the IsNil predicate on the "net" field.
func NetIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldNet))
}

// NetNotNil applies the NotNil predicate on the "net" field.
func NetNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldNet))
}

// NetEqualFold applies the EqualFold predicate on the "net" field.
func NetEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldNet, v))
}

// NetContainsFold applies the ContainsFold predicate on the "net" field.
func NetContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldNet, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldCode, v))
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldCode))
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldCode))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldCode, v))
}

// SourcesEQ applies the EQ predicate on the "sources" field.
func SourcesEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldSources, v))
}

// SourcesNEQ applies the NEQ predicate on the "sources" field.
func SourcesNEQ(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldSources, v))
}

// SourcesIn applies the In predicate on the "sources" field.
func SourcesIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldSources, vs...))
}

// SourcesNotIn applies the NotIn predicate on the "sources" field.
func SourcesNotIn(vs ...string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldSources, vs...))
}

// SourcesGT applies the GT predicate on the "sources" field.
func SourcesGT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldSources, v))
}

// SourcesGTE applies the GTE predicate on the "sources" field.
func SourcesGTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldSources, v))
}

// SourcesLT applies the LT predicate on the "sources" field.
func SourcesLT(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldSources, v))
}

// SourcesLTE applies the LTE predicate on the "sources" field.
func SourcesLTE(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldSources, v))
}

// SourcesContains applies the Contains predicate on the "sources" field.
func SourcesContains(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContains(FieldSources, v))
}

// SourcesHasPrefix applies the HasPrefix predicate on the "sources" field.
func SourcesHasPrefix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasPrefix(FieldSources, v))
}

// SourcesHasSuffix applies the HasSuffix predicate on the "sources" field.
func SourcesHasSuffix(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldHasSuffix(FieldSources, v))
}

// SourcesIsNil applies the IsNil predicate on the "sources" field.
func SourcesIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldSources))
}

// SourcesNotNil applies the NotNil predicate on the "sources" field.
func SourcesNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldSources))
}

// SourcesEqualFold applies the EqualFold predicate on the "sources" field.
func SourcesEqualFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEqualFold(FieldSources, v))
}

// SourcesContainsFold applies the ContainsFold predicate on the "sources" field.
func SourcesContainsFold(v string) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldContainsFold(FieldSources, v))
}

// NstEQ applies the EQ predicate on the "nst" field.
func NstEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldNst, v))
}

// NstNEQ applies the NEQ predicate on the "nst" field.
func NstNEQ(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldNst, v))
}

// NstIn applies the In predicate on the "nst" field.
func NstIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldNst, vs...))
}

// NstNotIn applies the NotIn predicate on the "nst" field.
func NstNotIn(vs ...int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldNst, vs...))
}

// NstGT applies the GT predicate on the "nst" field.
func NstGT(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldNst, v))
}

// NstGTE applies the GTE predicate on the "nst" field.
func NstGTE(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldNst, v))
}

// NstLT applies the LT predicate on the "nst" field.
func NstLT(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldNst, v))
}

// NstLTE applies the LTE predicate on the "nst" field.
func NstLTE(v int) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldNst, v))
}

// NstIsNil applies the IsNil predicate on the "nst" field.
func NstIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldNst))
}

// NstNotNil applies the NotNil predicate on the "nst" field.
func NstNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldNst))
}

// DminEQ applies the EQ predicate on the "dmin" field.
func DminEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldDmin, v))
}

// DminNEQ applies the NEQ predicate on the "dmin" field.
func DminNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldDmin, v))
}

// DminIn applies the In predicate on the "dmin" field.
func DminIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldDmin, vs...))
}

// DminNotIn applies the NotIn predicate on the "dmin" field.
func DminNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldDmin, vs...))
}

// DminGT applies the GT predicate on the "dmin" field.
func DminGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldDmin, v))
}

// DminGTE applies the GTE predicate on the "dmin" field.
func DminGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldDmin, v))
}

// DminLT applies the LT predicate on the "dmin" field.
func DminLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldDmin, v))
}

// DminLTE applies the LTE predicate on the "dmin" field.
func DminLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldDmin, v))
}

// DminIsNil applies the IsNil predicate on the "dmin" field.
func DminIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldDmin))
}

// DminNotNil applies the NotNil predicate on the "dmin" field.
func DminNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldDmin))
}

// RmsEQ applies the EQ predicate on the "rms" field.
func RmsEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldRms, v))
}

// RmsNEQ applies the NEQ predicate on the "rms" field.
func RmsNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldRms, v))
}

// RmsIn applies the In predicate on the "rms" field.
func RmsIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldRms, vs...))
}

// RmsNotIn applies the NotIn predicate on the "rms" field.
func RmsNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldRms, vs...))
}

// RmsGT applies the GT predicate on the "rms" field.
func RmsGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldRms, v))
}

// RmsGTE applies the GTE predicate on the "rms" field.
func RmsGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldRms, v))
}

// RmsLT applies the LT predicate on the "rms" field.
func RmsLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldRms, v))
}

// RmsLTE applies the LTE predicate on the "rms" field.
func RmsLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldRms, v))
}

// RmsIsNil applies the IsNil predicate on the "rms" field.
func RmsIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldRms))
}

// RmsNotNil applies the NotNil predicate on the "rms" field.
func RmsNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldRms))
}

// GapEQ applies the EQ predicate on the "gap" field.
func GapEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldGap, v))
}

// GapNEQ applies the NEQ predicate on the "gap" field.
func GapNEQ(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldGap, v))
}

// GapIn applies the In predicate on the "gap" field.
func GapIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldGap, vs...))
}

// GapNotIn applies the NotIn predicate on the "gap" field.
func GapNotIn(vs ...float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldGap, vs...))
}

// GapGT applies the GT predicate on the "gap" field.
func GapGT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldGap, v))
}

// GapGTE applies the GTE predicate on the "gap" field.
func GapGTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldGap, v))
}

// GapLT applies the LT predicate on the "gap" field.
func GapLT(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldGap, v))
}

// GapLTE applies the LTE predicate on the "gap" field.
func GapLTE(v float64) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldGap, v))
}

// GapIsNil applies the IsNil predicate on the "gap" field.
func GapIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldGap))
}

// GapNotNil applies the NotNil predicate on the "gap" field.
func GapNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldGap))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Earthquake {
	return predicate.Earthquake(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Earthquake {
	return predicate.Earthquake(sql.FieldNotNull(FieldUpdatedAt))
}

// HasAssociatedEvents applies the HasEdge predicate on the "associated_events" edge.
func HasAssociatedEvents() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssociatedEventsTable, AssociatedEventsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssociatedEventsWith applies the HasEdge predicate on the "associated_events" edge with a given conditions (other predicates).
func HasAssociatedEventsWith(preds ...predicate.AssociatedEvent) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newAssociatedEventsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLocation applies the HasEdge predicate on the "location" edge.
func HasLocation() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LocationTable, LocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationWith applies the HasEdge predicate on the "location" edge with a given conditions (other predicates).
func HasLocationWith(preds ...predicate.Location) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newLocationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMagnitude applies the HasEdge predicate on the "magnitude" edge.
func HasMagnitude() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MagnitudeTable, MagnitudeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMagnitudeWith applies the HasEdge predicate on the "magnitude" edge with a given conditions (other predicates).
func HasMagnitudeWith(preds ...predicate.Magnitude) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newMagnitudeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTime applies the HasEdge predicate on the "time" edge.
func HasTime() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TimeTable, TimeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTimeWith applies the HasEdge predicate on the "time" edge with a given conditions (other predicates).
func HasTimeWith(preds ...predicate.Time) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newTimeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTypes applies the HasEdge predicate on the "types" edge.
func HasTypes() predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TypesTable, TypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTypesWith applies the HasEdge predicate on the "types" edge with a given conditions (other predicates).
func HasTypesWith(preds ...predicate.Type_eathquake) predicate.Earthquake {
	return predicate.Earthquake(func(s *sql.Selector) {
		step := newTypesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Earthquake) predicate.Earthquake {
	return predicate.Earthquake(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Earthquake) predicate.Earthquake {
	return predicate.Earthquake(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Earthquake) predicate.Earthquake {
	return predicate.Earthquake(sql.NotPredicates(p))
}
