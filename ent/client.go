// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"assignment3/ent/migrate"

	"assignment3/ent/associatedevent"
	"assignment3/ent/earthquake"
	"assignment3/ent/location"
	"assignment3/ent/magnitude"
	"assignment3/ent/request"
	"assignment3/ent/role"
	"assignment3/ent/schemamigration"
	enttime "assignment3/ent/time"
	"assignment3/ent/type_eathquake"
	"assignment3/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AssociatedEvent is the client for interacting with the AssociatedEvent builders.
	AssociatedEvent *AssociatedEventClient
	// Earthquake is the client for interacting with the Earthquake builders.
	Earthquake *EarthquakeClient
	// Location is the client for interacting with the Location builders.
	Location *LocationClient
	// Magnitude is the client for interacting with the Magnitude builders.
	Magnitude *MagnitudeClient
	// Request is the client for interacting with the Request builders.
	Request *RequestClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// SchemaMigration is the client for interacting with the SchemaMigration builders.
	SchemaMigration *SchemaMigrationClient
	// Time is the client for interacting with the Time builders.
	Time *TimeClient
	// Type_eathquake is the client for interacting with the Type_eathquake builders.
	Type_eathquake *TypeEathquakeClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AssociatedEvent = NewAssociatedEventClient(c.config)
	c.Earthquake = NewEarthquakeClient(c.config)
	c.Location = NewLocationClient(c.config)
	c.Magnitude = NewMagnitudeClient(c.config)
	c.Request = NewRequestClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.SchemaMigration = NewSchemaMigrationClient(c.config)
	c.Time = NewTimeClient(c.config)
	c.Type_eathquake = NewTypeEathquakeClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		AssociatedEvent: NewAssociatedEventClient(cfg),
		Earthquake:      NewEarthquakeClient(cfg),
		Location:        NewLocationClient(cfg),
		Magnitude:       NewMagnitudeClient(cfg),
		Request:         NewRequestClient(cfg),
		Role:            NewRoleClient(cfg),
		SchemaMigration: NewSchemaMigrationClient(cfg),
		Time:            NewTimeClient(cfg),
		Type_eathquake:  NewTypeEathquakeClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		AssociatedEvent: NewAssociatedEventClient(cfg),
		Earthquake:      NewEarthquakeClient(cfg),
		Location:        NewLocationClient(cfg),
		Magnitude:       NewMagnitudeClient(cfg),
		Request:         NewRequestClient(cfg),
		Role:            NewRoleClient(cfg),
		SchemaMigration: NewSchemaMigrationClient(cfg),
		Time:            NewTimeClient(cfg),
		Type_eathquake:  NewTypeEathquakeClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AssociatedEvent.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AssociatedEvent, c.Earthquake, c.Location, c.Magnitude, c.Request, c.Role,
		c.SchemaMigration, c.Time, c.Type_eathquake, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AssociatedEvent, c.Earthquake, c.Location, c.Magnitude, c.Request, c.Role,
		c.SchemaMigration, c.Time, c.Type_eathquake, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AssociatedEventMutation:
		return c.AssociatedEvent.mutate(ctx, m)
	case *EarthquakeMutation:
		return c.Earthquake.mutate(ctx, m)
	case *LocationMutation:
		return c.Location.mutate(ctx, m)
	case *MagnitudeMutation:
		return c.Magnitude.mutate(ctx, m)
	case *RequestMutation:
		return c.Request.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *SchemaMigrationMutation:
		return c.SchemaMigration.mutate(ctx, m)
	case *TimeMutation:
		return c.Time.mutate(ctx, m)
	case *TypeEathquakeMutation:
		return c.Type_eathquake.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AssociatedEventClient is a client for the AssociatedEvent schema.
type AssociatedEventClient struct {
	config
}

// NewAssociatedEventClient returns a client for the AssociatedEvent from the given config.
func NewAssociatedEventClient(c config) *AssociatedEventClient {
	return &AssociatedEventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `associatedevent.Hooks(f(g(h())))`.
func (c *AssociatedEventClient) Use(hooks ...Hook) {
	c.hooks.AssociatedEvent = append(c.hooks.AssociatedEvent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `associatedevent.Intercept(f(g(h())))`.
func (c *AssociatedEventClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssociatedEvent = append(c.inters.AssociatedEvent, interceptors...)
}

// Create returns a builder for creating a AssociatedEvent entity.
func (c *AssociatedEventClient) Create() *AssociatedEventCreate {
	mutation := newAssociatedEventMutation(c.config, OpCreate)
	return &AssociatedEventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssociatedEvent entities.
func (c *AssociatedEventClient) CreateBulk(builders ...*AssociatedEventCreate) *AssociatedEventCreateBulk {
	return &AssociatedEventCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssociatedEventClient) MapCreateBulk(slice any, setFunc func(*AssociatedEventCreate, int)) *AssociatedEventCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssociatedEventCreateBulk{err: fmt.Errorf("calling to AssociatedEventClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssociatedEventCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssociatedEventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssociatedEvent.
func (c *AssociatedEventClient) Update() *AssociatedEventUpdate {
	mutation := newAssociatedEventMutation(c.config, OpUpdate)
	return &AssociatedEventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssociatedEventClient) UpdateOne(ae *AssociatedEvent) *AssociatedEventUpdateOne {
	mutation := newAssociatedEventMutation(c.config, OpUpdateOne, withAssociatedEvent(ae))
	return &AssociatedEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssociatedEventClient) UpdateOneID(id int) *AssociatedEventUpdateOne {
	mutation := newAssociatedEventMutation(c.config, OpUpdateOne, withAssociatedEventID(id))
	return &AssociatedEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssociatedEvent.
func (c *AssociatedEventClient) Delete() *AssociatedEventDelete {
	mutation := newAssociatedEventMutation(c.config, OpDelete)
	return &AssociatedEventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssociatedEventClient) DeleteOne(ae *AssociatedEvent) *AssociatedEventDeleteOne {
	return c.DeleteOneID(ae.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssociatedEventClient) DeleteOneID(id int) *AssociatedEventDeleteOne {
	builder := c.Delete().Where(associatedevent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssociatedEventDeleteOne{builder}
}

// Query returns a query builder for AssociatedEvent.
func (c *AssociatedEventClient) Query() *AssociatedEventQuery {
	return &AssociatedEventQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssociatedEvent},
		inters: c.Interceptors(),
	}
}

// Get returns a AssociatedEvent entity by its id.
func (c *AssociatedEventClient) Get(ctx context.Context, id int) (*AssociatedEvent, error) {
	return c.Query().Where(associatedevent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssociatedEventClient) GetX(ctx context.Context, id int) *AssociatedEvent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquake queries the earthquake edge of a AssociatedEvent.
func (c *AssociatedEventClient) QueryEarthquake(ae *AssociatedEvent) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ae.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(associatedevent.Table, associatedevent.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, associatedevent.EarthquakeTable, associatedevent.EarthquakeColumn),
		)
		fromV = sqlgraph.Neighbors(ae.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssociatedEventClient) Hooks() []Hook {
	return c.hooks.AssociatedEvent
}

// Interceptors returns the client interceptors.
func (c *AssociatedEventClient) Interceptors() []Interceptor {
	return c.inters.AssociatedEvent
}

func (c *AssociatedEventClient) mutate(ctx context.Context, m *AssociatedEventMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssociatedEventCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssociatedEventUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssociatedEventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssociatedEventDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssociatedEvent mutation op: %q", m.Op())
	}
}

// EarthquakeClient is a client for the Earthquake schema.
type EarthquakeClient struct {
	config
}

// NewEarthquakeClient returns a client for the Earthquake from the given config.
func NewEarthquakeClient(c config) *EarthquakeClient {
	return &EarthquakeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `earthquake.Hooks(f(g(h())))`.
func (c *EarthquakeClient) Use(hooks ...Hook) {
	c.hooks.Earthquake = append(c.hooks.Earthquake, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `earthquake.Intercept(f(g(h())))`.
func (c *EarthquakeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Earthquake = append(c.inters.Earthquake, interceptors...)
}

// Create returns a builder for creating a Earthquake entity.
func (c *EarthquakeClient) Create() *EarthquakeCreate {
	mutation := newEarthquakeMutation(c.config, OpCreate)
	return &EarthquakeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Earthquake entities.
func (c *EarthquakeClient) CreateBulk(builders ...*EarthquakeCreate) *EarthquakeCreateBulk {
	return &EarthquakeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EarthquakeClient) MapCreateBulk(slice any, setFunc func(*EarthquakeCreate, int)) *EarthquakeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EarthquakeCreateBulk{err: fmt.Errorf("calling to EarthquakeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EarthquakeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EarthquakeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Earthquake.
func (c *EarthquakeClient) Update() *EarthquakeUpdate {
	mutation := newEarthquakeMutation(c.config, OpUpdate)
	return &EarthquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EarthquakeClient) UpdateOne(e *Earthquake) *EarthquakeUpdateOne {
	mutation := newEarthquakeMutation(c.config, OpUpdateOne, withEarthquake(e))
	return &EarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EarthquakeClient) UpdateOneID(id int) *EarthquakeUpdateOne {
	mutation := newEarthquakeMutation(c.config, OpUpdateOne, withEarthquakeID(id))
	return &EarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Earthquake.
func (c *EarthquakeClient) Delete() *EarthquakeDelete {
	mutation := newEarthquakeMutation(c.config, OpDelete)
	return &EarthquakeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EarthquakeClient) DeleteOne(e *Earthquake) *EarthquakeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EarthquakeClient) DeleteOneID(id int) *EarthquakeDeleteOne {
	builder := c.Delete().Where(earthquake.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EarthquakeDeleteOne{builder}
}

// Query returns a query builder for Earthquake.
func (c *EarthquakeClient) Query() *EarthquakeQuery {
	return &EarthquakeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEarthquake},
		inters: c.Interceptors(),
	}
}

// Get returns a Earthquake entity by its id.
func (c *EarthquakeClient) Get(ctx context.Context, id int) (*Earthquake, error) {
	return c.Query().Where(earthquake.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EarthquakeClient) GetX(ctx context.Context, id int) *Earthquake {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAssociatedEvents queries the associated_events edge of a Earthquake.
func (c *EarthquakeClient) QueryAssociatedEvents(e *Earthquake) *AssociatedEventQuery {
	query := (&AssociatedEventClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(associatedevent.Table, associatedevent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, earthquake.AssociatedEventsTable, earthquake.AssociatedEventsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocation queries the location edge of a Earthquake.
func (c *EarthquakeClient) QueryLocation(e *Earthquake) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, earthquake.LocationTable, earthquake.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMagnitude queries the magnitude edge of a Earthquake.
func (c *EarthquakeClient) QueryMagnitude(e *Earthquake) *MagnitudeQuery {
	query := (&MagnitudeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(magnitude.Table, magnitude.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, earthquake.MagnitudeTable, earthquake.MagnitudeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTime queries the time edge of a Earthquake.
func (c *EarthquakeClient) QueryTime(e *Earthquake) *TimeQuery {
	query := (&TimeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(enttime.Table, enttime.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, earthquake.TimeTable, earthquake.TimeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTypes queries the types edge of a Earthquake.
func (c *EarthquakeClient) QueryTypes(e *Earthquake) *TypeEathquakeQuery {
	query := (&TypeEathquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(earthquake.Table, earthquake.FieldID, id),
			sqlgraph.To(type_eathquake.Table, type_eathquake.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, earthquake.TypesTable, earthquake.TypesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EarthquakeClient) Hooks() []Hook {
	return c.hooks.Earthquake
}

// Interceptors returns the client interceptors.
func (c *EarthquakeClient) Interceptors() []Interceptor {
	return c.inters.Earthquake
}

func (c *EarthquakeClient) mutate(ctx context.Context, m *EarthquakeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EarthquakeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EarthquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EarthquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EarthquakeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Earthquake mutation op: %q", m.Op())
	}
}

// LocationClient is a client for the Location schema.
type LocationClient struct {
	config
}

// NewLocationClient returns a client for the Location from the given config.
func NewLocationClient(c config) *LocationClient {
	return &LocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `location.Hooks(f(g(h())))`.
func (c *LocationClient) Use(hooks ...Hook) {
	c.hooks.Location = append(c.hooks.Location, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `location.Intercept(f(g(h())))`.
func (c *LocationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Location = append(c.inters.Location, interceptors...)
}

// Create returns a builder for creating a Location entity.
func (c *LocationClient) Create() *LocationCreate {
	mutation := newLocationMutation(c.config, OpCreate)
	return &LocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Location entities.
func (c *LocationClient) CreateBulk(builders ...*LocationCreate) *LocationCreateBulk {
	return &LocationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LocationClient) MapCreateBulk(slice any, setFunc func(*LocationCreate, int)) *LocationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LocationCreateBulk{err: fmt.Errorf("calling to LocationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LocationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Location.
func (c *LocationClient) Update() *LocationUpdate {
	mutation := newLocationMutation(c.config, OpUpdate)
	return &LocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocationClient) UpdateOne(l *Location) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocation(l))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocationClient) UpdateOneID(id int) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocationID(id))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Location.
func (c *LocationClient) Delete() *LocationDelete {
	mutation := newLocationMutation(c.config, OpDelete)
	return &LocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocationClient) DeleteOne(l *Location) *LocationDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocationClient) DeleteOneID(id int) *LocationDeleteOne {
	builder := c.Delete().Where(location.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocationDeleteOne{builder}
}

// Query returns a query builder for Location.
func (c *LocationClient) Query() *LocationQuery {
	return &LocationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLocation},
		inters: c.Interceptors(),
	}
}

// Get returns a Location entity by its id.
func (c *LocationClient) Get(ctx context.Context, id int) (*Location, error) {
	return c.Query().Where(location.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocationClient) GetX(ctx context.Context, id int) *Location {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquakes queries the earthquakes edge of a Location.
func (c *LocationClient) QueryEarthquakes(l *Location) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, location.EarthquakesTable, location.EarthquakesColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocationClient) Hooks() []Hook {
	return c.hooks.Location
}

// Interceptors returns the client interceptors.
func (c *LocationClient) Interceptors() []Interceptor {
	return c.inters.Location
}

func (c *LocationClient) mutate(ctx context.Context, m *LocationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LocationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LocationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LocationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Location mutation op: %q", m.Op())
	}
}

// MagnitudeClient is a client for the Magnitude schema.
type MagnitudeClient struct {
	config
}

// NewMagnitudeClient returns a client for the Magnitude from the given config.
func NewMagnitudeClient(c config) *MagnitudeClient {
	return &MagnitudeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `magnitude.Hooks(f(g(h())))`.
func (c *MagnitudeClient) Use(hooks ...Hook) {
	c.hooks.Magnitude = append(c.hooks.Magnitude, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `magnitude.Intercept(f(g(h())))`.
func (c *MagnitudeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Magnitude = append(c.inters.Magnitude, interceptors...)
}

// Create returns a builder for creating a Magnitude entity.
func (c *MagnitudeClient) Create() *MagnitudeCreate {
	mutation := newMagnitudeMutation(c.config, OpCreate)
	return &MagnitudeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Magnitude entities.
func (c *MagnitudeClient) CreateBulk(builders ...*MagnitudeCreate) *MagnitudeCreateBulk {
	return &MagnitudeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MagnitudeClient) MapCreateBulk(slice any, setFunc func(*MagnitudeCreate, int)) *MagnitudeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MagnitudeCreateBulk{err: fmt.Errorf("calling to MagnitudeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MagnitudeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MagnitudeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Magnitude.
func (c *MagnitudeClient) Update() *MagnitudeUpdate {
	mutation := newMagnitudeMutation(c.config, OpUpdate)
	return &MagnitudeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MagnitudeClient) UpdateOne(m *Magnitude) *MagnitudeUpdateOne {
	mutation := newMagnitudeMutation(c.config, OpUpdateOne, withMagnitude(m))
	return &MagnitudeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MagnitudeClient) UpdateOneID(id int) *MagnitudeUpdateOne {
	mutation := newMagnitudeMutation(c.config, OpUpdateOne, withMagnitudeID(id))
	return &MagnitudeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Magnitude.
func (c *MagnitudeClient) Delete() *MagnitudeDelete {
	mutation := newMagnitudeMutation(c.config, OpDelete)
	return &MagnitudeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MagnitudeClient) DeleteOne(m *Magnitude) *MagnitudeDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MagnitudeClient) DeleteOneID(id int) *MagnitudeDeleteOne {
	builder := c.Delete().Where(magnitude.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MagnitudeDeleteOne{builder}
}

// Query returns a query builder for Magnitude.
func (c *MagnitudeClient) Query() *MagnitudeQuery {
	return &MagnitudeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMagnitude},
		inters: c.Interceptors(),
	}
}

// Get returns a Magnitude entity by its id.
func (c *MagnitudeClient) Get(ctx context.Context, id int) (*Magnitude, error) {
	return c.Query().Where(magnitude.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MagnitudeClient) GetX(ctx context.Context, id int) *Magnitude {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquakes queries the earthquakes edge of a Magnitude.
func (c *MagnitudeClient) QueryEarthquakes(m *Magnitude) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(magnitude.Table, magnitude.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, magnitude.EarthquakesTable, magnitude.EarthquakesColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MagnitudeClient) Hooks() []Hook {
	return c.hooks.Magnitude
}

// Interceptors returns the client interceptors.
func (c *MagnitudeClient) Interceptors() []Interceptor {
	return c.inters.Magnitude
}

func (c *MagnitudeClient) mutate(ctx context.Context, m *MagnitudeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MagnitudeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MagnitudeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MagnitudeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MagnitudeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Magnitude mutation op: %q", m.Op())
	}
}

// RequestClient is a client for the Request schema.
type RequestClient struct {
	config
}

// NewRequestClient returns a client for the Request from the given config.
func NewRequestClient(c config) *RequestClient {
	return &RequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `request.Hooks(f(g(h())))`.
func (c *RequestClient) Use(hooks ...Hook) {
	c.hooks.Request = append(c.hooks.Request, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `request.Intercept(f(g(h())))`.
func (c *RequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.Request = append(c.inters.Request, interceptors...)
}

// Create returns a builder for creating a Request entity.
func (c *RequestClient) Create() *RequestCreate {
	mutation := newRequestMutation(c.config, OpCreate)
	return &RequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Request entities.
func (c *RequestClient) CreateBulk(builders ...*RequestCreate) *RequestCreateBulk {
	return &RequestCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RequestClient) MapCreateBulk(slice any, setFunc func(*RequestCreate, int)) *RequestCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RequestCreateBulk{err: fmt.Errorf("calling to RequestClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RequestCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Request.
func (c *RequestClient) Update() *RequestUpdate {
	mutation := newRequestMutation(c.config, OpUpdate)
	return &RequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequestClient) UpdateOne(r *Request) *RequestUpdateOne {
	mutation := newRequestMutation(c.config, OpUpdateOne, withRequest(r))
	return &RequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequestClient) UpdateOneID(id int) *RequestUpdateOne {
	mutation := newRequestMutation(c.config, OpUpdateOne, withRequestID(id))
	return &RequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Request.
func (c *RequestClient) Delete() *RequestDelete {
	mutation := newRequestMutation(c.config, OpDelete)
	return &RequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RequestClient) DeleteOne(r *Request) *RequestDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RequestClient) DeleteOneID(id int) *RequestDeleteOne {
	builder := c.Delete().Where(request.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequestDeleteOne{builder}
}

// Query returns a query builder for Request.
func (c *RequestClient) Query() *RequestQuery {
	return &RequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a Request entity by its id.
func (c *RequestClient) Get(ctx context.Context, id int) (*Request, error) {
	return c.Query().Where(request.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequestClient) GetX(ctx context.Context, id int) *Request {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RequestClient) Hooks() []Hook {
	return c.hooks.Request
}

// Interceptors returns the client interceptors.
func (c *RequestClient) Interceptors() []Interceptor {
	return c.inters.Request
}

func (c *RequestClient) mutate(ctx context.Context, m *RequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Request mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleClient) MapCreateBulk(slice any, setFunc func(*RoleCreate, int)) *RoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleCreateBulk{err: fmt.Errorf("calling to RoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id int) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id int) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRole},
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id int) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id int) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Role.
func (c *RoleClient) QueryUsers(r *Role) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, role.UsersTable, role.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Role mutation op: %q", m.Op())
	}
}

// SchemaMigrationClient is a client for the SchemaMigration schema.
type SchemaMigrationClient struct {
	config
}

// NewSchemaMigrationClient returns a client for the SchemaMigration from the given config.
func NewSchemaMigrationClient(c config) *SchemaMigrationClient {
	return &SchemaMigrationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `schemamigration.Hooks(f(g(h())))`.
func (c *SchemaMigrationClient) Use(hooks ...Hook) {
	c.hooks.SchemaMigration = append(c.hooks.SchemaMigration, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `schemamigration.Intercept(f(g(h())))`.
func (c *SchemaMigrationClient) Intercept(interceptors ...Interceptor) {
	c.inters.SchemaMigration = append(c.inters.SchemaMigration, interceptors...)
}

// Create returns a builder for creating a SchemaMigration entity.
func (c *SchemaMigrationClient) Create() *SchemaMigrationCreate {
	mutation := newSchemaMigrationMutation(c.config, OpCreate)
	return &SchemaMigrationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SchemaMigration entities.
func (c *SchemaMigrationClient) CreateBulk(builders ...*SchemaMigrationCreate) *SchemaMigrationCreateBulk {
	return &SchemaMigrationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SchemaMigrationClient) MapCreateBulk(slice any, setFunc func(*SchemaMigrationCreate, int)) *SchemaMigrationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SchemaMigrationCreateBulk{err: fmt.Errorf("calling to SchemaMigrationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SchemaMigrationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SchemaMigrationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SchemaMigration.
func (c *SchemaMigrationClient) Update() *SchemaMigrationUpdate {
	mutation := newSchemaMigrationMutation(c.config, OpUpdate)
	return &SchemaMigrationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SchemaMigrationClient) UpdateOne(sm *SchemaMigration) *SchemaMigrationUpdateOne {
	mutation := newSchemaMigrationMutation(c.config, OpUpdateOne, withSchemaMigration(sm))
	return &SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SchemaMigrationClient) UpdateOneID(id int) *SchemaMigrationUpdateOne {
	mutation := newSchemaMigrationMutation(c.config, OpUpdateOne, withSchemaMigrationID(id))
	return &SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SchemaMigration.
func (c *SchemaMigrationClient) Delete() *SchemaMigrationDelete {
	mutation := newSchemaMigrationMutation(c.config, OpDelete)
	return &SchemaMigrationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SchemaMigrationClient) DeleteOne(sm *SchemaMigration) *SchemaMigrationDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SchemaMigrationClient) DeleteOneID(id int) *SchemaMigrationDeleteOne {
	builder := c.Delete().Where(schemamigration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SchemaMigrationDeleteOne{builder}
}

// Query returns a query builder for SchemaMigration.
func (c *SchemaMigrationClient) Query() *SchemaMigrationQuery {
	return &SchemaMigrationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSchemaMigration},
		inters: c.Interceptors(),
	}
}

// Get returns a SchemaMigration entity by its id.
func (c *SchemaMigrationClient) Get(ctx context.Context, id int) (*SchemaMigration, error) {
	return c.Query().Where(schemamigration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SchemaMigrationClient) GetX(ctx context.Context, id int) *SchemaMigration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SchemaMigrationClient) Hooks() []Hook {
	return c.hooks.SchemaMigration
}

// Interceptors returns the client interceptors.
func (c *SchemaMigrationClient) Interceptors() []Interceptor {
	return c.inters.SchemaMigration
}

func (c *SchemaMigrationClient) mutate(ctx context.Context, m *SchemaMigrationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SchemaMigrationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SchemaMigrationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SchemaMigrationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SchemaMigration mutation op: %q", m.Op())
	}
}

// TimeClient is a client for the Time schema.
type TimeClient struct {
	config
}

// NewTimeClient returns a client for the Time from the given config.
func NewTimeClient(c config) *TimeClient {
	return &TimeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enttime.Hooks(f(g(h())))`.
func (c *TimeClient) Use(hooks ...Hook) {
	c.hooks.Time = append(c.hooks.Time, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enttime.Intercept(f(g(h())))`.
func (c *TimeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Time = append(c.inters.Time, interceptors...)
}

// Create returns a builder for creating a Time entity.
func (c *TimeClient) Create() *TimeCreate {
	mutation := newTimeMutation(c.config, OpCreate)
	return &TimeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Time entities.
func (c *TimeClient) CreateBulk(builders ...*TimeCreate) *TimeCreateBulk {
	return &TimeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TimeClient) MapCreateBulk(slice any, setFunc func(*TimeCreate, int)) *TimeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TimeCreateBulk{err: fmt.Errorf("calling to TimeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TimeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TimeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Time.
func (c *TimeClient) Update() *TimeUpdate {
	mutation := newTimeMutation(c.config, OpUpdate)
	return &TimeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TimeClient) UpdateOne(t *Time) *TimeUpdateOne {
	mutation := newTimeMutation(c.config, OpUpdateOne, withTime(t))
	return &TimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TimeClient) UpdateOneID(id int) *TimeUpdateOne {
	mutation := newTimeMutation(c.config, OpUpdateOne, withTimeID(id))
	return &TimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Time.
func (c *TimeClient) Delete() *TimeDelete {
	mutation := newTimeMutation(c.config, OpDelete)
	return &TimeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TimeClient) DeleteOne(t *Time) *TimeDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TimeClient) DeleteOneID(id int) *TimeDeleteOne {
	builder := c.Delete().Where(enttime.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TimeDeleteOne{builder}
}

// Query returns a query builder for Time.
func (c *TimeClient) Query() *TimeQuery {
	return &TimeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTime},
		inters: c.Interceptors(),
	}
}

// Get returns a Time entity by its id.
func (c *TimeClient) Get(ctx context.Context, id int) (*Time, error) {
	return c.Query().Where(enttime.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TimeClient) GetX(ctx context.Context, id int) *Time {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquakes queries the earthquakes edge of a Time.
func (c *TimeClient) QueryEarthquakes(t *Time) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enttime.Table, enttime.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enttime.EarthquakesTable, enttime.EarthquakesColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TimeClient) Hooks() []Hook {
	return c.hooks.Time
}

// Interceptors returns the client interceptors.
func (c *TimeClient) Interceptors() []Interceptor {
	return c.inters.Time
}

func (c *TimeClient) mutate(ctx context.Context, m *TimeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TimeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TimeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TimeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TimeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Time mutation op: %q", m.Op())
	}
}

// TypeEathquakeClient is a client for the Type_eathquake schema.
type TypeEathquakeClient struct {
	config
}

// NewTypeEathquakeClient returns a client for the Type_eathquake from the given config.
func NewTypeEathquakeClient(c config) *TypeEathquakeClient {
	return &TypeEathquakeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `type_eathquake.Hooks(f(g(h())))`.
func (c *TypeEathquakeClient) Use(hooks ...Hook) {
	c.hooks.Type_eathquake = append(c.hooks.Type_eathquake, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `type_eathquake.Intercept(f(g(h())))`.
func (c *TypeEathquakeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Type_eathquake = append(c.inters.Type_eathquake, interceptors...)
}

// Create returns a builder for creating a Type_eathquake entity.
func (c *TypeEathquakeClient) Create() *TypeEathquakeCreate {
	mutation := newTypeEathquakeMutation(c.config, OpCreate)
	return &TypeEathquakeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Type_eathquake entities.
func (c *TypeEathquakeClient) CreateBulk(builders ...*TypeEathquakeCreate) *TypeEathquakeCreateBulk {
	return &TypeEathquakeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TypeEathquakeClient) MapCreateBulk(slice any, setFunc func(*TypeEathquakeCreate, int)) *TypeEathquakeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TypeEathquakeCreateBulk{err: fmt.Errorf("calling to TypeEathquakeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TypeEathquakeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TypeEathquakeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Type_eathquake.
func (c *TypeEathquakeClient) Update() *TypeEathquakeUpdate {
	mutation := newTypeEathquakeMutation(c.config, OpUpdate)
	return &TypeEathquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TypeEathquakeClient) UpdateOne(te *Type_eathquake) *TypeEathquakeUpdateOne {
	mutation := newTypeEathquakeMutation(c.config, OpUpdateOne, withType_eathquake(te))
	return &TypeEathquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TypeEathquakeClient) UpdateOneID(id int) *TypeEathquakeUpdateOne {
	mutation := newTypeEathquakeMutation(c.config, OpUpdateOne, withType_eathquakeID(id))
	return &TypeEathquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Type_eathquake.
func (c *TypeEathquakeClient) Delete() *TypeEathquakeDelete {
	mutation := newTypeEathquakeMutation(c.config, OpDelete)
	return &TypeEathquakeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TypeEathquakeClient) DeleteOne(te *Type_eathquake) *TypeEathquakeDeleteOne {
	return c.DeleteOneID(te.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TypeEathquakeClient) DeleteOneID(id int) *TypeEathquakeDeleteOne {
	builder := c.Delete().Where(type_eathquake.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TypeEathquakeDeleteOne{builder}
}

// Query returns a query builder for Type_eathquake.
func (c *TypeEathquakeClient) Query() *TypeEathquakeQuery {
	return &TypeEathquakeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTypeEathquake},
		inters: c.Interceptors(),
	}
}

// Get returns a Type_eathquake entity by its id.
func (c *TypeEathquakeClient) Get(ctx context.Context, id int) (*Type_eathquake, error) {
	return c.Query().Where(type_eathquake.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TypeEathquakeClient) GetX(ctx context.Context, id int) *Type_eathquake {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEarthquake queries the earthquake edge of a Type_eathquake.
func (c *TypeEathquakeClient) QueryEarthquake(te *Type_eathquake) *EarthquakeQuery {
	query := (&EarthquakeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := te.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(type_eathquake.Table, type_eathquake.FieldID, id),
			sqlgraph.To(earthquake.Table, earthquake.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, type_eathquake.EarthquakeTable, type_eathquake.EarthquakeColumn),
		)
		fromV = sqlgraph.Neighbors(te.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TypeEathquakeClient) Hooks() []Hook {
	return c.hooks.Type_eathquake
}

// Interceptors returns the client interceptors.
func (c *TypeEathquakeClient) Interceptors() []Interceptor {
	return c.inters.Type_eathquake
}

func (c *TypeEathquakeClient) mutate(ctx context.Context, m *TypeEathquakeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TypeEathquakeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TypeEathquakeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TypeEathquakeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TypeEathquakeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Type_eathquake mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a User.
func (c *UserClient) QueryRole(u *User) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.RoleTable, user.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AssociatedEvent, Earthquake, Location, Magnitude, Request, Role,
		SchemaMigration, Time, Type_eathquake, User []ent.Hook
	}
	inters struct {
		AssociatedEvent, Earthquake, Location, Magnitude, Request, Role,
		SchemaMigration, Time, Type_eathquake, User []ent.Interceptor
	}
)
