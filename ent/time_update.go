// Code generated by ent, DO NOT EDIT.

package ent

import (
	"assignment3/ent/earthquake"
	"assignment3/ent/predicate"
	enttime "assignment3/ent/time"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimeUpdate is the builder for updating Time entities.
type TimeUpdate struct {
	config
	hooks    []Hook
	mutation *TimeMutation
}

// Where appends a list predicates to the TimeUpdate builder.
func (tu *TimeUpdate) Where(ps ...predicate.Time) *TimeUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetDateTime sets the "date_time" field.
func (tu *TimeUpdate) SetDateTime(t time.Time) *TimeUpdate {
	tu.mutation.SetDateTime(t)
	return tu
}

// SetNillableDateTime sets the "date_time" field if the given value is not nil.
func (tu *TimeUpdate) SetNillableDateTime(t *time.Time) *TimeUpdate {
	if t != nil {
		tu.SetDateTime(*t)
	}
	return tu
}

// ClearDateTime clears the value of the "date_time" field.
func (tu *TimeUpdate) ClearDateTime() *TimeUpdate {
	tu.mutation.ClearDateTime()
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TimeUpdate) SetCreatedAt(t time.Time) *TimeUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TimeUpdate) SetNillableCreatedAt(t *time.Time) *TimeUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tu *TimeUpdate) ClearCreatedAt() *TimeUpdate {
	tu.mutation.ClearCreatedAt()
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TimeUpdate) SetUpdatedAt(t time.Time) *TimeUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tu *TimeUpdate) SetNillableUpdatedAt(t *time.Time) *TimeUpdate {
	if t != nil {
		tu.SetUpdatedAt(*t)
	}
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TimeUpdate) ClearUpdatedAt() *TimeUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// AddEarthquakeIDs adds the "earthquakes" edge to the Earthquake entity by IDs.
func (tu *TimeUpdate) AddEarthquakeIDs(ids ...int) *TimeUpdate {
	tu.mutation.AddEarthquakeIDs(ids...)
	return tu
}

// AddEarthquakes adds the "earthquakes" edges to the Earthquake entity.
func (tu *TimeUpdate) AddEarthquakes(e ...*Earthquake) *TimeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.AddEarthquakeIDs(ids...)
}

// Mutation returns the TimeMutation object of the builder.
func (tu *TimeUpdate) Mutation() *TimeMutation {
	return tu.mutation
}

// ClearEarthquakes clears all "earthquakes" edges to the Earthquake entity.
func (tu *TimeUpdate) ClearEarthquakes() *TimeUpdate {
	tu.mutation.ClearEarthquakes()
	return tu
}

// RemoveEarthquakeIDs removes the "earthquakes" edge to Earthquake entities by IDs.
func (tu *TimeUpdate) RemoveEarthquakeIDs(ids ...int) *TimeUpdate {
	tu.mutation.RemoveEarthquakeIDs(ids...)
	return tu
}

// RemoveEarthquakes removes "earthquakes" edges to Earthquake entities.
func (tu *TimeUpdate) RemoveEarthquakes(e ...*Earthquake) *TimeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.RemoveEarthquakeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TimeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TimeUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TimeUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TimeUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(enttime.Table, enttime.Columns, sqlgraph.NewFieldSpec(enttime.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.DateTime(); ok {
		_spec.SetField(enttime.FieldDateTime, field.TypeTime, value)
	}
	if tu.mutation.DateTimeCleared() {
		_spec.ClearField(enttime.FieldDateTime, field.TypeTime)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(enttime.FieldCreatedAt, field.TypeTime, value)
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(enttime.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(enttime.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(enttime.FieldUpdatedAt, field.TypeTime)
	}
	if tu.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enttime.EarthquakesTable,
			Columns: []string{enttime.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedEarthquakesIDs(); len(nodes) > 0 && !tu.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enttime.EarthquakesTable,
			Columns: []string{enttime.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.EarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enttime.EarthquakesTable,
			Columns: []string{enttime.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enttime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TimeUpdateOne is the builder for updating a single Time entity.
type TimeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimeMutation
}

// SetDateTime sets the "date_time" field.
func (tuo *TimeUpdateOne) SetDateTime(t time.Time) *TimeUpdateOne {
	tuo.mutation.SetDateTime(t)
	return tuo
}

// SetNillableDateTime sets the "date_time" field if the given value is not nil.
func (tuo *TimeUpdateOne) SetNillableDateTime(t *time.Time) *TimeUpdateOne {
	if t != nil {
		tuo.SetDateTime(*t)
	}
	return tuo
}

// ClearDateTime clears the value of the "date_time" field.
func (tuo *TimeUpdateOne) ClearDateTime() *TimeUpdateOne {
	tuo.mutation.ClearDateTime()
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TimeUpdateOne) SetCreatedAt(t time.Time) *TimeUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TimeUpdateOne) SetNillableCreatedAt(t *time.Time) *TimeUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (tuo *TimeUpdateOne) ClearCreatedAt() *TimeUpdateOne {
	tuo.mutation.ClearCreatedAt()
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TimeUpdateOne) SetUpdatedAt(t time.Time) *TimeUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuo *TimeUpdateOne) SetNillableUpdatedAt(t *time.Time) *TimeUpdateOne {
	if t != nil {
		tuo.SetUpdatedAt(*t)
	}
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TimeUpdateOne) ClearUpdatedAt() *TimeUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// AddEarthquakeIDs adds the "earthquakes" edge to the Earthquake entity by IDs.
func (tuo *TimeUpdateOne) AddEarthquakeIDs(ids ...int) *TimeUpdateOne {
	tuo.mutation.AddEarthquakeIDs(ids...)
	return tuo
}

// AddEarthquakes adds the "earthquakes" edges to the Earthquake entity.
func (tuo *TimeUpdateOne) AddEarthquakes(e ...*Earthquake) *TimeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.AddEarthquakeIDs(ids...)
}

// Mutation returns the TimeMutation object of the builder.
func (tuo *TimeUpdateOne) Mutation() *TimeMutation {
	return tuo.mutation
}

// ClearEarthquakes clears all "earthquakes" edges to the Earthquake entity.
func (tuo *TimeUpdateOne) ClearEarthquakes() *TimeUpdateOne {
	tuo.mutation.ClearEarthquakes()
	return tuo
}

// RemoveEarthquakeIDs removes the "earthquakes" edge to Earthquake entities by IDs.
func (tuo *TimeUpdateOne) RemoveEarthquakeIDs(ids ...int) *TimeUpdateOne {
	tuo.mutation.RemoveEarthquakeIDs(ids...)
	return tuo
}

// RemoveEarthquakes removes "earthquakes" edges to Earthquake entities.
func (tuo *TimeUpdateOne) RemoveEarthquakes(e ...*Earthquake) *TimeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.RemoveEarthquakeIDs(ids...)
}

// Where appends a list predicates to the TimeUpdate builder.
func (tuo *TimeUpdateOne) Where(ps ...predicate.Time) *TimeUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TimeUpdateOne) Select(field string, fields ...string) *TimeUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Time entity.
func (tuo *TimeUpdateOne) Save(ctx context.Context) (*Time, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TimeUpdateOne) SaveX(ctx context.Context) *Time {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TimeUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TimeUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TimeUpdateOne) sqlSave(ctx context.Context) (_node *Time, err error) {
	_spec := sqlgraph.NewUpdateSpec(enttime.Table, enttime.Columns, sqlgraph.NewFieldSpec(enttime.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Time.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enttime.FieldID)
		for _, f := range fields {
			if !enttime.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enttime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.DateTime(); ok {
		_spec.SetField(enttime.FieldDateTime, field.TypeTime, value)
	}
	if tuo.mutation.DateTimeCleared() {
		_spec.ClearField(enttime.FieldDateTime, field.TypeTime)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(enttime.FieldCreatedAt, field.TypeTime, value)
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(enttime.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(enttime.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(enttime.FieldUpdatedAt, field.TypeTime)
	}
	if tuo.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enttime.EarthquakesTable,
			Columns: []string{enttime.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedEarthquakesIDs(); len(nodes) > 0 && !tuo.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enttime.EarthquakesTable,
			Columns: []string{enttime.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.EarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enttime.EarthquakesTable,
			Columns: []string{enttime.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Time{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enttime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
