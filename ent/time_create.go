// Code generated by ent, DO NOT EDIT.

package ent

import (
	"assignment3/ent/earthquake"
	enttime "assignment3/ent/time"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimeCreate is the builder for creating a Time entity.
type TimeCreate struct {
	config
	mutation *TimeMutation
	hooks    []Hook
}

// SetDateTime sets the "date_time" field.
func (tc *TimeCreate) SetDateTime(t time.Time) *TimeCreate {
	tc.mutation.SetDateTime(t)
	return tc
}

// SetNillableDateTime sets the "date_time" field if the given value is not nil.
func (tc *TimeCreate) SetNillableDateTime(t *time.Time) *TimeCreate {
	if t != nil {
		tc.SetDateTime(*t)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TimeCreate) SetCreatedAt(t time.Time) *TimeCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TimeCreate) SetNillableCreatedAt(t *time.Time) *TimeCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TimeCreate) SetUpdatedAt(t time.Time) *TimeCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TimeCreate) SetNillableUpdatedAt(t *time.Time) *TimeCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TimeCreate) SetID(i int) *TimeCreate {
	tc.mutation.SetID(i)
	return tc
}

// AddEarthquakeIDs adds the "earthquakes" edge to the Earthquake entity by IDs.
func (tc *TimeCreate) AddEarthquakeIDs(ids ...int) *TimeCreate {
	tc.mutation.AddEarthquakeIDs(ids...)
	return tc
}

// AddEarthquakes adds the "earthquakes" edges to the Earthquake entity.
func (tc *TimeCreate) AddEarthquakes(e ...*Earthquake) *TimeCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tc.AddEarthquakeIDs(ids...)
}

// Mutation returns the TimeMutation object of the builder.
func (tc *TimeCreate) Mutation() *TimeMutation {
	return tc.mutation
}

// Save creates the Time in the database.
func (tc *TimeCreate) Save(ctx context.Context) (*Time, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TimeCreate) SaveX(ctx context.Context) *Time {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TimeCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TimeCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TimeCreate) check() error {
	return nil
}

func (tc *TimeCreate) sqlSave(ctx context.Context) (*Time, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TimeCreate) createSpec() (*Time, *sqlgraph.CreateSpec) {
	var (
		_node = &Time{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(enttime.Table, sqlgraph.NewFieldSpec(enttime.FieldID, field.TypeInt))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.DateTime(); ok {
		_spec.SetField(enttime.FieldDateTime, field.TypeTime, value)
		_node.DateTime = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(enttime.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(enttime.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tc.mutation.EarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enttime.EarthquakesTable,
			Columns: []string{enttime.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TimeCreateBulk is the builder for creating many Time entities in bulk.
type TimeCreateBulk struct {
	config
	err      error
	builders []*TimeCreate
}

// Save creates the Time entities in the database.
func (tcb *TimeCreateBulk) Save(ctx context.Context) ([]*Time, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Time, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TimeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TimeCreateBulk) SaveX(ctx context.Context) []*Time {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TimeCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TimeCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
