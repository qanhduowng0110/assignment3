// Code generated by ent, DO NOT EDIT.

package ent

import (
	"assignment3/ent/earthquake"
	"assignment3/ent/magnitude"
	"assignment3/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MagnitudeUpdate is the builder for updating Magnitude entities.
type MagnitudeUpdate struct {
	config
	hooks    []Hook
	mutation *MagnitudeMutation
}

// Where appends a list predicates to the MagnitudeUpdate builder.
func (mu *MagnitudeUpdate) Where(ps ...predicate.Magnitude) *MagnitudeUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMagnitudeValue sets the "magnitude_value" field.
func (mu *MagnitudeUpdate) SetMagnitudeValue(f float64) *MagnitudeUpdate {
	mu.mutation.ResetMagnitudeValue()
	mu.mutation.SetMagnitudeValue(f)
	return mu
}

// SetNillableMagnitudeValue sets the "magnitude_value" field if the given value is not nil.
func (mu *MagnitudeUpdate) SetNillableMagnitudeValue(f *float64) *MagnitudeUpdate {
	if f != nil {
		mu.SetMagnitudeValue(*f)
	}
	return mu
}

// AddMagnitudeValue adds f to the "magnitude_value" field.
func (mu *MagnitudeUpdate) AddMagnitudeValue(f float64) *MagnitudeUpdate {
	mu.mutation.AddMagnitudeValue(f)
	return mu
}

// ClearMagnitudeValue clears the value of the "magnitude_value" field.
func (mu *MagnitudeUpdate) ClearMagnitudeValue() *MagnitudeUpdate {
	mu.mutation.ClearMagnitudeValue()
	return mu
}

// SetMagnitudeType sets the "magnitude_type" field.
func (mu *MagnitudeUpdate) SetMagnitudeType(s string) *MagnitudeUpdate {
	mu.mutation.SetMagnitudeType(s)
	return mu
}

// SetNillableMagnitudeType sets the "magnitude_type" field if the given value is not nil.
func (mu *MagnitudeUpdate) SetNillableMagnitudeType(s *string) *MagnitudeUpdate {
	if s != nil {
		mu.SetMagnitudeType(*s)
	}
	return mu
}

// ClearMagnitudeType clears the value of the "magnitude_type" field.
func (mu *MagnitudeUpdate) ClearMagnitudeType() *MagnitudeUpdate {
	mu.mutation.ClearMagnitudeType()
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MagnitudeUpdate) SetCreatedAt(t time.Time) *MagnitudeUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MagnitudeUpdate) SetNillableCreatedAt(t *time.Time) *MagnitudeUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (mu *MagnitudeUpdate) ClearCreatedAt() *MagnitudeUpdate {
	mu.mutation.ClearCreatedAt()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MagnitudeUpdate) SetUpdatedAt(t time.Time) *MagnitudeUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mu *MagnitudeUpdate) SetNillableUpdatedAt(t *time.Time) *MagnitudeUpdate {
	if t != nil {
		mu.SetUpdatedAt(*t)
	}
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MagnitudeUpdate) ClearUpdatedAt() *MagnitudeUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// AddEarthquakeIDs adds the "earthquakes" edge to the Earthquake entity by IDs.
func (mu *MagnitudeUpdate) AddEarthquakeIDs(ids ...int) *MagnitudeUpdate {
	mu.mutation.AddEarthquakeIDs(ids...)
	return mu
}

// AddEarthquakes adds the "earthquakes" edges to the Earthquake entity.
func (mu *MagnitudeUpdate) AddEarthquakes(e ...*Earthquake) *MagnitudeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mu.AddEarthquakeIDs(ids...)
}

// Mutation returns the MagnitudeMutation object of the builder.
func (mu *MagnitudeUpdate) Mutation() *MagnitudeMutation {
	return mu.mutation
}

// ClearEarthquakes clears all "earthquakes" edges to the Earthquake entity.
func (mu *MagnitudeUpdate) ClearEarthquakes() *MagnitudeUpdate {
	mu.mutation.ClearEarthquakes()
	return mu
}

// RemoveEarthquakeIDs removes the "earthquakes" edge to Earthquake entities by IDs.
func (mu *MagnitudeUpdate) RemoveEarthquakeIDs(ids ...int) *MagnitudeUpdate {
	mu.mutation.RemoveEarthquakeIDs(ids...)
	return mu
}

// RemoveEarthquakes removes "earthquakes" edges to Earthquake entities.
func (mu *MagnitudeUpdate) RemoveEarthquakes(e ...*Earthquake) *MagnitudeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return mu.RemoveEarthquakeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MagnitudeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MagnitudeUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MagnitudeUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MagnitudeUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MagnitudeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(magnitude.Table, magnitude.Columns, sqlgraph.NewFieldSpec(magnitude.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MagnitudeValue(); ok {
		_spec.SetField(magnitude.FieldMagnitudeValue, field.TypeFloat64, value)
	}
	if value, ok := mu.mutation.AddedMagnitudeValue(); ok {
		_spec.AddField(magnitude.FieldMagnitudeValue, field.TypeFloat64, value)
	}
	if mu.mutation.MagnitudeValueCleared() {
		_spec.ClearField(magnitude.FieldMagnitudeValue, field.TypeFloat64)
	}
	if value, ok := mu.mutation.MagnitudeType(); ok {
		_spec.SetField(magnitude.FieldMagnitudeType, field.TypeString, value)
	}
	if mu.mutation.MagnitudeTypeCleared() {
		_spec.ClearField(magnitude.FieldMagnitudeType, field.TypeString)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(magnitude.FieldCreatedAt, field.TypeTime, value)
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.ClearField(magnitude.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(magnitude.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.ClearField(magnitude.FieldUpdatedAt, field.TypeTime)
	}
	if mu.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magnitude.EarthquakesTable,
			Columns: []string{magnitude.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedEarthquakesIDs(); len(nodes) > 0 && !mu.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magnitude.EarthquakesTable,
			Columns: []string{magnitude.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.EarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magnitude.EarthquakesTable,
			Columns: []string{magnitude.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{magnitude.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MagnitudeUpdateOne is the builder for updating a single Magnitude entity.
type MagnitudeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MagnitudeMutation
}

// SetMagnitudeValue sets the "magnitude_value" field.
func (muo *MagnitudeUpdateOne) SetMagnitudeValue(f float64) *MagnitudeUpdateOne {
	muo.mutation.ResetMagnitudeValue()
	muo.mutation.SetMagnitudeValue(f)
	return muo
}

// SetNillableMagnitudeValue sets the "magnitude_value" field if the given value is not nil.
func (muo *MagnitudeUpdateOne) SetNillableMagnitudeValue(f *float64) *MagnitudeUpdateOne {
	if f != nil {
		muo.SetMagnitudeValue(*f)
	}
	return muo
}

// AddMagnitudeValue adds f to the "magnitude_value" field.
func (muo *MagnitudeUpdateOne) AddMagnitudeValue(f float64) *MagnitudeUpdateOne {
	muo.mutation.AddMagnitudeValue(f)
	return muo
}

// ClearMagnitudeValue clears the value of the "magnitude_value" field.
func (muo *MagnitudeUpdateOne) ClearMagnitudeValue() *MagnitudeUpdateOne {
	muo.mutation.ClearMagnitudeValue()
	return muo
}

// SetMagnitudeType sets the "magnitude_type" field.
func (muo *MagnitudeUpdateOne) SetMagnitudeType(s string) *MagnitudeUpdateOne {
	muo.mutation.SetMagnitudeType(s)
	return muo
}

// SetNillableMagnitudeType sets the "magnitude_type" field if the given value is not nil.
func (muo *MagnitudeUpdateOne) SetNillableMagnitudeType(s *string) *MagnitudeUpdateOne {
	if s != nil {
		muo.SetMagnitudeType(*s)
	}
	return muo
}

// ClearMagnitudeType clears the value of the "magnitude_type" field.
func (muo *MagnitudeUpdateOne) ClearMagnitudeType() *MagnitudeUpdateOne {
	muo.mutation.ClearMagnitudeType()
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MagnitudeUpdateOne) SetCreatedAt(t time.Time) *MagnitudeUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MagnitudeUpdateOne) SetNillableCreatedAt(t *time.Time) *MagnitudeUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (muo *MagnitudeUpdateOne) ClearCreatedAt() *MagnitudeUpdateOne {
	muo.mutation.ClearCreatedAt()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MagnitudeUpdateOne) SetUpdatedAt(t time.Time) *MagnitudeUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (muo *MagnitudeUpdateOne) SetNillableUpdatedAt(t *time.Time) *MagnitudeUpdateOne {
	if t != nil {
		muo.SetUpdatedAt(*t)
	}
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MagnitudeUpdateOne) ClearUpdatedAt() *MagnitudeUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// AddEarthquakeIDs adds the "earthquakes" edge to the Earthquake entity by IDs.
func (muo *MagnitudeUpdateOne) AddEarthquakeIDs(ids ...int) *MagnitudeUpdateOne {
	muo.mutation.AddEarthquakeIDs(ids...)
	return muo
}

// AddEarthquakes adds the "earthquakes" edges to the Earthquake entity.
func (muo *MagnitudeUpdateOne) AddEarthquakes(e ...*Earthquake) *MagnitudeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return muo.AddEarthquakeIDs(ids...)
}

// Mutation returns the MagnitudeMutation object of the builder.
func (muo *MagnitudeUpdateOne) Mutation() *MagnitudeMutation {
	return muo.mutation
}

// ClearEarthquakes clears all "earthquakes" edges to the Earthquake entity.
func (muo *MagnitudeUpdateOne) ClearEarthquakes() *MagnitudeUpdateOne {
	muo.mutation.ClearEarthquakes()
	return muo
}

// RemoveEarthquakeIDs removes the "earthquakes" edge to Earthquake entities by IDs.
func (muo *MagnitudeUpdateOne) RemoveEarthquakeIDs(ids ...int) *MagnitudeUpdateOne {
	muo.mutation.RemoveEarthquakeIDs(ids...)
	return muo
}

// RemoveEarthquakes removes "earthquakes" edges to Earthquake entities.
func (muo *MagnitudeUpdateOne) RemoveEarthquakes(e ...*Earthquake) *MagnitudeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return muo.RemoveEarthquakeIDs(ids...)
}

// Where appends a list predicates to the MagnitudeUpdate builder.
func (muo *MagnitudeUpdateOne) Where(ps ...predicate.Magnitude) *MagnitudeUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MagnitudeUpdateOne) Select(field string, fields ...string) *MagnitudeUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Magnitude entity.
func (muo *MagnitudeUpdateOne) Save(ctx context.Context) (*Magnitude, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MagnitudeUpdateOne) SaveX(ctx context.Context) *Magnitude {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MagnitudeUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MagnitudeUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MagnitudeUpdateOne) sqlSave(ctx context.Context) (_node *Magnitude, err error) {
	_spec := sqlgraph.NewUpdateSpec(magnitude.Table, magnitude.Columns, sqlgraph.NewFieldSpec(magnitude.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Magnitude.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, magnitude.FieldID)
		for _, f := range fields {
			if !magnitude.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != magnitude.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.MagnitudeValue(); ok {
		_spec.SetField(magnitude.FieldMagnitudeValue, field.TypeFloat64, value)
	}
	if value, ok := muo.mutation.AddedMagnitudeValue(); ok {
		_spec.AddField(magnitude.FieldMagnitudeValue, field.TypeFloat64, value)
	}
	if muo.mutation.MagnitudeValueCleared() {
		_spec.ClearField(magnitude.FieldMagnitudeValue, field.TypeFloat64)
	}
	if value, ok := muo.mutation.MagnitudeType(); ok {
		_spec.SetField(magnitude.FieldMagnitudeType, field.TypeString, value)
	}
	if muo.mutation.MagnitudeTypeCleared() {
		_spec.ClearField(magnitude.FieldMagnitudeType, field.TypeString)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(magnitude.FieldCreatedAt, field.TypeTime, value)
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.ClearField(magnitude.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(magnitude.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.ClearField(magnitude.FieldUpdatedAt, field.TypeTime)
	}
	if muo.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magnitude.EarthquakesTable,
			Columns: []string{magnitude.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedEarthquakesIDs(); len(nodes) > 0 && !muo.mutation.EarthquakesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magnitude.EarthquakesTable,
			Columns: []string{magnitude.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.EarthquakesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magnitude.EarthquakesTable,
			Columns: []string{magnitude.EarthquakesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(earthquake.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Magnitude{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{magnitude.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
