// Code generated by ent, DO NOT EDIT.

package magnitude

import (
	"assignment3/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldLTE(FieldID, id))
}

// MagnitudeValue applies equality check predicate on the "magnitude_value" field. It's identical to MagnitudeValueEQ.
func MagnitudeValue(v float64) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldEQ(FieldMagnitudeValue, v))
}

// MagnitudeType applies equality check predicate on the "magnitude_type" field. It's identical to MagnitudeTypeEQ.
func MagnitudeType(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldEQ(FieldMagnitudeType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldEQ(FieldUpdatedAt, v))
}

// MagnitudeValueEQ applies the EQ predicate on the "magnitude_value" field.
func MagnitudeValueEQ(v float64) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldEQ(FieldMagnitudeValue, v))
}

// MagnitudeValueNEQ applies the NEQ predicate on the "magnitude_value" field.
func MagnitudeValueNEQ(v float64) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNEQ(FieldMagnitudeValue, v))
}

// MagnitudeValueIn applies the In predicate on the "magnitude_value" field.
func MagnitudeValueIn(vs ...float64) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldIn(FieldMagnitudeValue, vs...))
}

// MagnitudeValueNotIn applies the NotIn predicate on the "magnitude_value" field.
func MagnitudeValueNotIn(vs ...float64) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNotIn(FieldMagnitudeValue, vs...))
}

// MagnitudeValueGT applies the GT predicate on the "magnitude_value" field.
func MagnitudeValueGT(v float64) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldGT(FieldMagnitudeValue, v))
}

// MagnitudeValueGTE applies the GTE predicate on the "magnitude_value" field.
func MagnitudeValueGTE(v float64) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldGTE(FieldMagnitudeValue, v))
}

// MagnitudeValueLT applies the LT predicate on the "magnitude_value" field.
func MagnitudeValueLT(v float64) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldLT(FieldMagnitudeValue, v))
}

// MagnitudeValueLTE applies the LTE predicate on the "magnitude_value" field.
func MagnitudeValueLTE(v float64) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldLTE(FieldMagnitudeValue, v))
}

// MagnitudeValueIsNil applies the IsNil predicate on the "magnitude_value" field.
func MagnitudeValueIsNil() predicate.Magnitude {
	return predicate.Magnitude(sql.FieldIsNull(FieldMagnitudeValue))
}

// MagnitudeValueNotNil applies the NotNil predicate on the "magnitude_value" field.
func MagnitudeValueNotNil() predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNotNull(FieldMagnitudeValue))
}

// MagnitudeTypeEQ applies the EQ predicate on the "magnitude_type" field.
func MagnitudeTypeEQ(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldEQ(FieldMagnitudeType, v))
}

// MagnitudeTypeNEQ applies the NEQ predicate on the "magnitude_type" field.
func MagnitudeTypeNEQ(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNEQ(FieldMagnitudeType, v))
}

// MagnitudeTypeIn applies the In predicate on the "magnitude_type" field.
func MagnitudeTypeIn(vs ...string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldIn(FieldMagnitudeType, vs...))
}

// MagnitudeTypeNotIn applies the NotIn predicate on the "magnitude_type" field.
func MagnitudeTypeNotIn(vs ...string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNotIn(FieldMagnitudeType, vs...))
}

// MagnitudeTypeGT applies the GT predicate on the "magnitude_type" field.
func MagnitudeTypeGT(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldGT(FieldMagnitudeType, v))
}

// MagnitudeTypeGTE applies the GTE predicate on the "magnitude_type" field.
func MagnitudeTypeGTE(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldGTE(FieldMagnitudeType, v))
}

// MagnitudeTypeLT applies the LT predicate on the "magnitude_type" field.
func MagnitudeTypeLT(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldLT(FieldMagnitudeType, v))
}

// MagnitudeTypeLTE applies the LTE predicate on the "magnitude_type" field.
func MagnitudeTypeLTE(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldLTE(FieldMagnitudeType, v))
}

// MagnitudeTypeContains applies the Contains predicate on the "magnitude_type" field.
func MagnitudeTypeContains(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldContains(FieldMagnitudeType, v))
}

// MagnitudeTypeHasPrefix applies the HasPrefix predicate on the "magnitude_type" field.
func MagnitudeTypeHasPrefix(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldHasPrefix(FieldMagnitudeType, v))
}

// MagnitudeTypeHasSuffix applies the HasSuffix predicate on the "magnitude_type" field.
func MagnitudeTypeHasSuffix(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldHasSuffix(FieldMagnitudeType, v))
}

// MagnitudeTypeIsNil applies the IsNil predicate on the "magnitude_type" field.
func MagnitudeTypeIsNil() predicate.Magnitude {
	return predicate.Magnitude(sql.FieldIsNull(FieldMagnitudeType))
}

// MagnitudeTypeNotNil applies the NotNil predicate on the "magnitude_type" field.
func MagnitudeTypeNotNil() predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNotNull(FieldMagnitudeType))
}

// MagnitudeTypeEqualFold applies the EqualFold predicate on the "magnitude_type" field.
func MagnitudeTypeEqualFold(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldEqualFold(FieldMagnitudeType, v))
}

// MagnitudeTypeContainsFold applies the ContainsFold predicate on the "magnitude_type" field.
func MagnitudeTypeContainsFold(v string) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldContainsFold(FieldMagnitudeType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Magnitude {
	return predicate.Magnitude(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Magnitude {
	return predicate.Magnitude(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Magnitude {
	return predicate.Magnitude(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Magnitude {
	return predicate.Magnitude(sql.FieldNotNull(FieldUpdatedAt))
}

// HasEarthquakes applies the HasEdge predicate on the "earthquakes" edge.
func HasEarthquakes() predicate.Magnitude {
	return predicate.Magnitude(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EarthquakesTable, EarthquakesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEarthquakesWith applies the HasEdge predicate on the "earthquakes" edge with a given conditions (other predicates).
func HasEarthquakesWith(preds ...predicate.Earthquake) predicate.Magnitude {
	return predicate.Magnitude(func(s *sql.Selector) {
		step := newEarthquakesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Magnitude) predicate.Magnitude {
	return predicate.Magnitude(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Magnitude) predicate.Magnitude {
	return predicate.Magnitude(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Magnitude) predicate.Magnitude {
	return predicate.Magnitude(sql.NotPredicates(p))
}
